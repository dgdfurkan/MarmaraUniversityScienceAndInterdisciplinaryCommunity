// Mobile Navigation
const hamburger = document.querySelector('.hamburger');
const navMenu = document.querySelector('.nav-menu');

hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navMenu.classList.toggle('active');
});

// Close mobile menu when clicking on a link
document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
    });
});

// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Contact form handling
const contactForm = document.getElementById('contact-form');
if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const data = Object.fromEntries(formData);
        
        // Here you would typically send the data to your backend
        console.log('Form submitted:', data);
        
        // Show success message
        alert('Mesajƒ±nƒ±z ba≈üarƒ±yla g√∂nderildi!');
        this.reset();
    });
}

// Load blog posts dynamically
async function loadBlogPosts() {
    const blogContainer = document.getElementById('blog-posts');
    if (!blogContainer) return;
    
    try {
        const posts = await DatabaseService.getBlogPosts();
        
        if (posts.length === 0) {
            blogContainer.innerHTML = '<p class="no-posts">Hen√ºz blog yazƒ±sƒ± bulunmuyor. Yakƒ±nda yeni yazƒ±lar eklenecek!</p>';
            return;
        }
        
        blogContainer.innerHTML = posts.map(post => {
            const postDate = new Date(post.created_at);
            const formattedDate = postDate.toLocaleString('tr-TR', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Europe/Istanbul'
            });
            
            // Get image source
            const imageSrc = post.image_file || post.image_url || 'https://images.unsplash.com/photo-1640102953836-5651f5d6b240?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1024&q=80';
            
            // Otomatik g√∂r√ºnt√ºlenme sayƒ±sƒ±nƒ± artƒ±r
            incrementViewCount(post.id);
            
            return `
                <div class="card blog-card-enhanced" data-post-id="${post.id}" onclick="readFullBlog(${post.id})" style="cursor: pointer;">
                    <div class="card-img-holder">
                        <img src="${imageSrc}" alt="${post.title}">
                        <div class="blog-overlay">
                            <div class="blog-stats">
                                <div class="stat-item">
                                    <i class="fas fa-eye"></i>
                                    <span>${post.view_count || 0}</span>
                                </div>
                                <div class="stat-item">
                                    <i class="fas fa-heart"></i>
                                    <span>${post.like_count || 0}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="blog-content">
                        <h3 class="blog-title">${post.title}</h3>
                        <span class="blog-time">${formattedDate}</span>
                        <p class="description">
                            ${post.excerpt || post.content}
                        </p>
                        <div class="blog-actions">
                            <div class="reaction-buttons">
                                <div class="reaction-group">
                                    <button class="reaction-btn like-btn ${post.user_liked ? 'active' : ''}" 
                                            onclick="event.stopPropagation(); toggleBlogLike(${post.id})" 
                                            title="Beƒüen">
                                        <span class="emoji">‚ù§Ô∏è</span>
                                        <span class="count">${post.like_count || 0}</span>
                                    </button>
                                    <button class="reaction-btn useful-btn ${post.user_useful ? 'active' : ''}" 
                                            onclick="event.stopPropagation(); addBlogReaction(${post.id}, 'useful')" 
                                            title="Faydalƒ±">
                                        <span class="emoji">üëç</span>
                                        <span class="count">${post.useful_count || 0}</span>
                                    </button>
                                    <button class="reaction-btn informative-btn ${post.user_informative ? 'active' : ''}" 
                                            onclick="event.stopPropagation(); addBlogReaction(${post.id}, 'informative')" 
                                            title="Bilgilendirici">
                                        <span class="emoji">üí°</span>
                                        <span class="count">${post.informative_count || 0}</span>
                                    </button>
                                    <button class="reaction-btn inspiring-btn ${post.user_inspiring ? 'active' : ''}" 
                                            onclick="event.stopPropagation(); addBlogReaction(${post.id}, 'inspiring')" 
                                            title="ƒ∞lham Verici">
                                        <span class="emoji">‚ú®</span>
                                        <span class="count">${post.inspiring_count || 0}</span>
                                    </button>
                                </div>
                                <div class="blog-stats-summary">
                                    <div class="stat-item">
                                        <i class="fas fa-eye"></i>
                                        <span>${post.view_count || 0}</span>
                                    </div>
                                    <div class="stat-item">
                                        <i class="fas fa-poll"></i>
                                        <span>${(post.like_count || 0) + (post.useful_count || 0) + (post.informative_count || 0) + (post.inspiring_count || 0)}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
    } catch (error) {
        console.error('Error loading blog posts:', error);
        blogContainer.innerHTML = '<p class="no-posts">Blog yazƒ±larƒ± y√ºklenirken bir hata olu≈ütu.</p>';
    }
}

// Helper function to get blog icon based on category
function getBlogIcon(category) {
    const icons = {
        'bilim': 'fas fa-flask',
        'teknoloji': 'fas fa-microchip',
        'etkinlik': 'fas fa-calendar-alt',
        'duyuru': 'fas fa-bullhorn',
        'atolye': 'fas fa-tools',
        'konferans': 'fas fa-microphone'
    };
    return icons[category] || 'fas fa-newspaper';
}

// Helper function to get category name
function getCategoryName(category) {
    const categories = {
        'bilim': 'Bilim',
        'teknoloji': 'Teknoloji',
        'etkinlik': 'Etkinlik',
        'duyuru': 'Duyuru',
        'atolye': 'At√∂lye',
        'konferans': 'Konferans'
    };
    return categories[category] || category;
}

// Increment announcement view count
async function incrementAnnouncementViewCount(announcementId) {
    try {
        await DatabaseService.incrementAnnouncementViewCount(announcementId);
    } catch (error) {
        console.error('Error incrementing view count:', error);
    }
}

// Global updateVoteDisplay fonksiyonu
function updateVoteDisplay(announcementCard) {
    const announcementId = announcementCard.dataset.announcementId;
    const reactions = announcementCard.querySelectorAll('.reaction');
    
    // Total votes'u hesapla
    let totalVotes = 0;
    reactions.forEach(reaction => {
        const count = parseInt(reaction.querySelector('.count').textContent);
        totalVotes += count;
    });
    
    // Total votes span'ini g√ºncelle
    const totalVotesSpan = announcementCard.querySelector(`#total-votes-count-${announcementId}`);
    if (totalVotesSpan) {
        totalVotesSpan.textContent = totalVotes;
    }
    
    // Progress bar'larƒ± g√ºncelle
    reactions.forEach(reaction => {
        const count = parseInt(reaction.querySelector('.count').textContent);
        const percentage = totalVotes > 0 ? (count / totalVotes) * 100 : 0;
        const progressBar = reaction.querySelector('.reaction-progress');
            if (progressBar) {
                // Oylar varsa g√∂ster
                if (count > 0) {
                    progressBar.classList.add('show');
                    progressBar.style.opacity = '0.4';
                } else {
                    progressBar.classList.remove('show');
                    progressBar.style.opacity = '0';
                }
                
                // ƒ∞lk y√ºklemede transition'ƒ± ge√ßici disable et
                progressBar.style.transition = 'none';
                progressBar.style.width = `${percentage}%`;
                
                // Kƒ±sa bir s√ºre sonra transition'ƒ± tekrar aktif et
                setTimeout(() => {
                    progressBar.style.transition = 'width 0.6s cubic-bezier(0.2, 0.8, 0.2, 1), opacity 0.3s ease';
                }, 100);
            }
    });
}

// Load announcements dynamically
async function loadAnnouncements() {
    const announcementsContainer = document.getElementById('announcements-container');
    if (!announcementsContainer) return;
    
    try {
        const announcements = await DatabaseService.getAnnouncements();
        
        if (announcements.length === 0) {
            announcementsContainer.innerHTML = '<p class="no-announcements">Hen√ºz duyuru bulunmuyor. Yakƒ±nda yeni duyurular eklenecek!</p>';
            return;
        }
        
        // Her duyuru i√ßin kullanƒ±cƒ± etkile≈üimini kontrol et
        const announcementsWithInteractions = await Promise.all(
            announcements.map(async (announcement) => {
                const userInteraction = await DatabaseService.getUserInteraction(announcement.id);
                return { ...announcement, userInteraction };
            })
        );
        
        announcementsContainer.innerHTML = announcementsWithInteractions.map(announcement => {
            const announcementDate = new Date(announcement.created_at);
            const formattedDate = announcementDate.toLocaleDateString('tr-TR', {
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            });
            const formattedTime = announcementDate.toLocaleTimeString('tr-TR', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            // Otomatik g√∂r√ºnt√ºlenme sayƒ±sƒ±nƒ± artƒ±r (IP tabanlƒ±)
            incrementAnnouncementViewCount(announcement.id);
            
            // Kullanƒ±cƒ±nƒ±n aktif reaksiyonunu belirle
            const activeReaction = announcement.userInteraction?.reaction_type;
            
            return `
                <div class="announcement-card" data-announcement-id="${announcement.id}">
                <div class="announcement-header">
                        <div class="header-icon"><i class="fas fa-bullhorn"></i></div>
                        <div class="header-text">
                            <h2>${announcement.title}</h2>
                            <p class="date">${formattedDate} ‚Ä¢ ${formattedTime}</p>
                        </div>
                </div>
                <div class="announcement-content">
                        ${announcement.content || '<p>ƒ∞√ßerik bulunmuyor</p>'}
                </div>
                <div class="announcement-footer">
                        <div class="reactions-group reactions">
                            <div class="reaction ${activeReaction === 'onay' ? 'active' : ''}" data-reaction="onay">
                                <div class="reaction-progress"></div>
                                <span class="emoji">üëç</span>
                                <span class="count">${announcement.reaction_onay || 0}</span>
                </div>
                            <div class="reaction ${activeReaction === 'katiliyorum' ? 'active' : ''}" data-reaction="katiliyorum">
                                <div class="reaction-progress"></div>
                                <span class="emoji">‚úÖ</span>
                                <span class="count">${announcement.reaction_katiliyorum || 0}</span>
            </div>
                            <div class="reaction ${activeReaction === 'katilamiyorum' ? 'active' : ''}" data-reaction="katilamiyorum">
                                <div class="reaction-progress"></div>
                                <span class="emoji">‚ùå</span>
                                <span class="count">${announcement.reaction_katilamiyorum || 0}</span>
                            </div>
                            <div class="reaction ${activeReaction === 'sorum_var' ? 'active' : ''}" data-reaction="sorum_var">
                                <div class="reaction-progress"></div>
                                <span class="emoji">ü§î</span>
                                <span class="count">${announcement.reaction_sorum_var || 0}</span>
                            </div>
                            <div class="reaction ${activeReaction === 'destek' ? 'active' : ''}" data-reaction="destek">
                                <div class="reaction-progress"></div>
                                <span class="emoji">üëè</span>
                                <span class="count">${announcement.reaction_destek || 0}</span>
                            </div>
                        </div>
                        <div class="footer-stats">
                            <div class="view-count">
                                <i class="fas fa-eye"></i>
                                <span>${announcement.view_count || 0}</span>
                            </div>
                            <div class="total-votes">
                                <i class="fas fa-poll"></i>
                                <span id="total-votes-count-${announcement.id}">${(announcement.reaction_onay || 0) + (announcement.reaction_katiliyorum || 0) + (announcement.reaction_katilamiyorum || 0) + (announcement.reaction_sorum_var || 0) + (announcement.reaction_destek || 0)}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        // Sayfa y√ºklendiƒüinde progress bar'larƒ± ayarla
        setTimeout(() => {
            document.querySelectorAll('.announcement-card').forEach(card => {
                updateVoteDisplay(card);
            });
        }, 500);
        
        // Sayfa tamamen y√ºklendikten sonra da bir kez daha kontrol et
        setTimeout(() => {
            document.querySelectorAll('.announcement-card').forEach(card => {
                updateVoteDisplay(card);
            });
        }, 1000);
        
    } catch (error) {
        console.error('Error loading announcements:', error);
        announcementsContainer.innerHTML = '<p class="error">Duyurular y√ºklenirken bir hata olu≈ütu.</p>';
    }
}

// Load events dynamically
async function loadEvents() {
    const eventsGrid = document.getElementById('events-grid');
    if (!eventsGrid) return;
    
    try {
        const events = await DatabaseService.getEvents();
        
        if (events.length === 0) {
            eventsGrid.innerHTML = '<p class="no-events">Hen√ºz etkinlik bulunmuyor. Yakƒ±nda yeni etkinlikler eklenecek!</p>';
            return;
        }
        
        // En yeni etkinliƒüi en sola koymak i√ßin reverse kullanƒ±yoruz
        eventsGrid.innerHTML = events.map(event => {
            const eventDate = new Date(event.date);
            const eventId = event.id;
            return `
                <div class="event-card-container">
                    <div class="event-card" data-event-id="${eventId}" onclick="flipEventCard(${eventId})">
                        <!-- KARTIN √ñN Y√úZ√ú -->
                        <div class="card-face card-front">
                            <div class="card-image">
                                <img src="${event.image_url || 'https://placehold.co/600x400/a2d2ff/333?text=Etkinlik'}" alt="${event.title}">
                            </div>
                            <div class="card-content">
                                <h2 class="event-title">${event.title}</h2>
                                <ul class="event-details">
                                    <li><i class="fas fa-calendar-alt"></i> ${eventDate.toLocaleString('tr-TR', {
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                        timeZone: 'Europe/Istanbul'
                                    })}</li>
                                    <li><i class="fas fa-clock"></i> ${eventDate.toLocaleString('tr-TR', {
                                        hour: '2-digit',
                                        minute: '2-digit',
                                        timeZone: 'Europe/Istanbul'
                                    })}</li>
                                    <li><i class="fas fa-map-marker-alt"></i> ${event.location}</li>
                                </ul>
                                <p class="event-description">${event.description ? event.description.substring(0, 100) + '...' : 'Etkinlik a√ßƒ±klamasƒ± bulunmuyor.'}</p>
                            </div>
                            <div class="card-footer">
                                <div class="participant-count"><i class="fas fa-users"></i> ${event.capacity || 'Sƒ±nƒ±rsƒ±z'} Katƒ±lƒ±mcƒ±</div>
                                <button class="btn flip-btn" onclick="event.stopPropagation(); flipEventCard(${eventId})">Etkinliƒüe Kayƒ±t Ol</button>
                            </div>
                        </div>
                        <!-- KARTIN ARKA Y√úZ√ú (FORM) -->
                        <div class="card-face card-back">
                            <div class="registration-form">
                                <h3 class="form-title">Etkinliƒüe Kayƒ±t Ol</h3>
                                <form class="event-registration-form" data-event-id="${eventId}">
                                    <div class="animated-form-control">
                                        <input type="text" name="fullname" required="">
                                        <label for="fullname">
                                            <span style="transition-delay:0ms">ƒ∞</span><span style="transition-delay:50ms">s</span><span style="transition-delay:100ms">i</span><span style="transition-delay:150ms">m</span><span style="transition-delay:200ms"> </span><span style="transition-delay:250ms">S</span><span style="transition-delay:300ms">o</span><span style="transition-delay:350ms">y</span><span style="transition-delay:400ms">i</span><span style="transition-delay:450ms">s</span><span style="transition-delay:500ms">i</span><span style="transition-delay:550ms">m</span>
                                        </label>
                                    </div>
                                   
                                    <div class="animated-form-control">
                                        <input type="text" name="university" autocomplete="off" required="">
                                        <label for="university">
                                             <span style="transition-delay:0ms">√ú</span><span style="transition-delay:50ms">n</span><span style="transition-delay:100ms">i</span><span style="transition-delay:150ms">v</span><span style="transition-delay:200ms">e</span><span style="transition-delay:250ms">r</span><span style="transition-delay:300ms">s</span><span style="transition-delay:350ms">i</span><span style="transition-delay:400ms">t</span><span style="transition-delay:450ms">e</span>
                                        </label>
                                        <div class="custom-dropdown university-dropdown"></div>
                                    </div>

                                    <div class="animated-form-control">
                                        <input type="text" name="department" autocomplete="off" required="">
                                        <label for="department">
                                            <span style="transition-delay:0ms">B</span><span style="transition-delay:50ms">√∂</span><span style="transition-delay:100ms">l</span><span style="transition-delay:150ms">√º</span><span style="transition-delay:200ms">m</span>
                                        </label>
                                        <div class="custom-dropdown department-dropdown"></div>
                                    </div>

                                    <div class="animated-form-control">
                                        <input type="email" name="email" required="">
                                        <label for="email">
                                            <span style="transition-delay:0ms">E</span><span style="transition-delay:50ms">-</span><span style="transition-delay:100ms">p</span><span style="transition-delay:150ms">o</span><span style="transition-delay:200ms">s</span><span style="transition-delay:250ms">t</span><span style="transition-delay:300ms">a</span>
                                        </label>
                                    </div>
                                    <div class="form-actions">
                                        <button type="button" class="btn btn-back" onclick="flipEventCardBack(${eventId})">Geri D√∂n</button>
                                        <button type="submit" class="btn">Kaydƒ± Onayla</button>
                                    </div>
                                </form>
                            </div>
                            <div class="success-message" style="display: none;">
                                 <div class="success-icon"><i class="fas fa-check-circle"></i></div>
                                 <h3>Kaydƒ±nƒ±z Alƒ±ndƒ±!</h3>
                                 <p>Etkinlik detaylarƒ± e-posta adresinize g√∂nderilecektir.</p>
                                 <button type="button" class="btn btn-primary" onclick="flipEventCardBack(${eventId})">
                                     <i class="fas fa-arrow-left"></i> Geri D√∂n
                                 </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
    } catch (error) {
        console.error('Error loading events:', error);
        eventsGrid.innerHTML = '<p class="no-events">Etkinlikler y√ºklenirken bir hata olu≈ütu.</p>';
    }
}

// Event card flip functions
function flipEventCard(eventId) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (card) {
        card.classList.add('is-flipped');
        setupCustomDropdowns(eventId);
    }
}

function flipEventCardBack(eventId) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (card) {
        card.classList.remove('is-flipped');
    }
}

// Helper function to get event icon based on type
function getEventIcon(type) {
    const icons = {
        'bilim-senligi': 'fas fa-flask',
        'atolye': 'fas fa-tools',
        'konferans': 'fas fa-microphone',
        'teknik-gezi': 'fas fa-bus'
    };
    return icons[type] || 'fas fa-calendar-alt';
}

// Blog interaction functions
async function incrementViewCount(postId) {
    try {
        const result = await DatabaseService.incrementBlogView(postId);
        if (result.alreadyViewed) {
            console.log('Post already viewed by this IP');
        } else if (result.success) {
            console.log('View count incremented');
        }
    } catch (error) {
        console.error('Error incrementing view count:', error);
    }
}

async function toggleBlogLike(postId) {
    try {
        const result = await DatabaseService.toggleBlogLike(postId);
        
        if (result.error) {
            console.error('Error toggling like:', result.error);
            return;
        }
        
        // Update the like count and button state in UI
        const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
        if (cardElement) {
            const likeButton = cardElement.querySelector(`[onclick="toggleBlogLike(${postId})"]`);
            if (likeButton) {
                // Update button state
                if (result.action === 'liked') {
                    likeButton.classList.add('active');
                } else if (result.action === 'unliked') {
                    likeButton.classList.remove('active');
                }
                
                // Update count (we'll need to reload to get accurate count)
                setTimeout(() => {
                    loadBlogPosts();
                }, 500);
            }
        }
        
        console.log('Like toggled:', result.action);
    } catch (error) {
        console.error('Error toggling like:', error);
        alert('Beƒüeni i≈ülemi sƒ±rasƒ±nda bir hata olu≈ütu.');
    }
}

async function addBlogReaction(postId, reactionType) {
    try {
        const result = await DatabaseService.addBlogReaction(postId, reactionType);
        
        if (result.error) {
            console.error('Error adding reaction:', result.error);
            return;
        }
        
        // Update the reaction button state in UI
        const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
        if (cardElement) {
            const reactionButton = cardElement.querySelector(`[onclick="addBlogReaction(${postId}, '${reactionType}')"]`);
            if (reactionButton) {
                // Update button state
                if (result.action === 'added') {
                    reactionButton.classList.add('active');
                } else if (result.action === 'removed') {
                    reactionButton.classList.remove('active');
                }
                
                // Update count (we'll need to reload to get accurate count)
                setTimeout(() => {
                    loadBlogPosts();
                }, 500);
            }
        }
        
        console.log('Reaction toggled:', result.action, result.reactionType);
    } catch (error) {
        console.error('Error adding reaction:', error);
        alert('Reaksiyon i≈ülemi sƒ±rasƒ±nda bir hata olu≈ütu.');
    }
}

async function sharePost(postId) {
    try {
        const result = await DatabaseService.incrementBlogShare(postId);
        
        if (result.alreadyShared) {
            console.log('Post already shared by this IP');
            return;
        }
        
        if (result.error) {
            console.error('Error sharing post:', result.error);
            return;
        }
        
        // Show share options
        if (navigator.share) {
            try {
                await navigator.share({
                    title: 'MUSIC Blog',
                    text: 'Bu blog yazƒ±sƒ±nƒ± kontrol edin!',
                    url: window.location.href
                });
            } catch (shareError) {
                if (shareError.name === 'AbortError') {
                    console.log('Share canceled by user');
                    // Don't show error for user cancellation
                } else {
                    throw shareError;
                }
            }
        } else {
            // Fallback: copy to clipboard
            try {
                await navigator.clipboard.writeText(window.location.href);
                alert('Link kopyalandƒ±!');
            } catch (clipboardError) {
                console.error('Clipboard error:', clipboardError);
                alert('Payla≈üƒ±m linki: ' + window.location.href);
            }
        }
    } catch (error) {
        console.error('Error sharing post:', error);
        alert('Payla≈üƒ±m sƒ±rasƒ±nda bir hata olu≈ütu.');
    }
}

async function readFullBlog(postId) {
    // Close any existing modal first
    closeBlogModal();
    
    // Add click animation
    const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
    if (cardElement) {
        cardElement.classList.add('clicking');
        setTimeout(() => {
            cardElement.classList.remove('clicking');
        }, 150);
    }
    
    try {
        // Get specific blog post data from Supabase
        const { data, error } = await supabase
            .from('blog_posts')
            .select('*')
            .eq('id', postId)
            .eq('status', 'published')
            .single();
        
        if (error || !data) {
            alert('Blog yazƒ±sƒ± bulunamadƒ±!');
            return;
        }
        
        const postTitle = data.title;
        const postDate = new Date(data.created_at).toLocaleString('tr-TR', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Istanbul'
        });
        const postContent = data.content;
        const authorName = data.author_name || 'MUSIC Ekibi';
        
        // Debug: Log the content to see what we're getting
        console.log('Blog content from Supabase:', postContent);
        console.log('Content type:', typeof postContent);
        console.log('Content length:', postContent ? postContent.length : 'null/undefined');
        
        // Create modal HTML
        const modalHTML = `
            <div class="blog-modal-overlay" id="blog-modal-overlay">
                <div class="blog-modal">
                    <button class="blog-modal-close" onclick="closeBlogModal()">
                        <i class="fas fa-times"></i>
                    </button>
                    <div class="blog-modal-header">
                        <h1 class="blog-modal-title">${postTitle}</h1>
                        <div class="blog-modal-meta">
                            <div class="blog-modal-date">
                                <i class="fas fa-calendar"></i>
                                <span>${postDate}</span>
                            </div>
                            <div class="blog-modal-author">
                                <i class="fas fa-user"></i>
                                <span>${authorName}</span>
                            </div>
                        </div>
                    </div>
                    <div class="blog-modal-content" id="blog-modal-content">
                        ${formatBlogContent(postContent)}
                    </div>
                    <div class="blog-modal-actions">
                        <button class="blog-modal-like" onclick="toggleModalLike(${postId})" id="modal-like-${postId}">
                            <i class="fas fa-heart"></i>
                            <span>Beƒüen</span>
                        </button>
                        <button class="blog-modal-share" onclick="shareModalPost(${postId})">
                            <i class="fas fa-share-alt"></i>
                            <span>Payla≈ü</span>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        // Add modal to body
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Show modal with animation immediately
        const modalOverlay = document.getElementById('blog-modal-overlay');
        modalOverlay.classList.add('active');
        
        // Remove image resize containers from blog modal content
        const modalContent = document.getElementById('blog-modal-content');
        const resizeContainers = modalContent.querySelectorAll('.image-resize-container');
        resizeContainers.forEach(container => {
            const img = container.querySelector('img');
            if (img) {
                // Move image out of resize container
                container.parentNode.insertBefore(img, container);
                container.remove();
            }
        });
        
        // Close modal when clicking outside
        modalOverlay.addEventListener('click', function(e) {
            if (e.target === modalOverlay) {
                closeBlogModal();
            }
        });
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
        
    } catch (error) {
        console.error('Error loading blog post:', error);
        alert('Blog yazƒ±sƒ± y√ºklenirken bir hata olu≈ütu.');
    }
}

function closeBlogModal() {
    const modal = document.getElementById('blog-modal-overlay');
    if (modal) {
        modal.classList.remove('active');
        
        // Remove modal after animation
        setTimeout(() => {
            modal.remove();
            document.body.style.overflow = '';
        }, 300);
    }
}

function toggleModalLike(postId) {
    // Use the existing toggleLike function
    toggleLike(postId);
    
    // Update modal like button
    const modalLikeBtn = document.getElementById(`modal-like-${postId}`);
    if (modalLikeBtn) {
        // This will be updated by the toggleLike function
        setTimeout(() => {
            // Check if the card like button shows liked state
            const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
            const cardLikeBtn = cardElement.querySelector(`[onclick="toggleLike(${postId})"]`);
            const cardIcon = cardLikeBtn.querySelector('i');
            
            if (cardIcon.style.color === 'rgb(239, 68, 68)') {
                modalLikeBtn.classList.add('liked');
                modalLikeBtn.querySelector('span').textContent = 'Beƒüenildi';
            } else {
                modalLikeBtn.classList.remove('liked');
                modalLikeBtn.querySelector('span').textContent = 'Beƒüen';
            }
        }, 100);
    }
}

function shareModalPost(postId) {
    // Use the existing sharePost function
    sharePost(postId);
}

function openCommentModal(postId) {
    // TODO: Implement comment modal
    alert('Yorum sistemi yakƒ±nda eklenecek!');
}

function formatBlogContent(content) {
    console.log('formatBlogContent input:', content);
    
    // If content is null or undefined, return empty string
    if (!content) {
        console.log('Content is null/undefined, returning empty string');
        return '';
    }
    
    // If content contains HTML tags, return it as is
    if (content.includes('<') && content.includes('>')) {
        console.log('Content contains HTML, returning as is');
        return content;
    }
    
    // Otherwise, format as plain text with paragraphs
    console.log('Content is plain text, formatting as paragraphs');
    const paragraphs = content.split('\n\n').filter(p => p.trim() !== '');
    const result = paragraphs.map(paragraph => 
        `<p>${paragraph.trim()}</p>`
    ).join('');
    
    console.log('Formatted result:', result);
    return result;
}

function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Load blog posts and events when page loads
// Data Arrays for dropdowns
const universities = [
    "Acƒ±badem Mehmet Ali Aydƒ±nlar √úniversitesi",
    "Altƒ±nba≈ü √úniversitesi",
    "Ata≈üehir Adƒ±g√ºzel Meslek Y√ºksekokulu",
    "Bah√ße≈üehir √úniversitesi",
    "Beykoz √úniversitesi",
    "Bezm-i Alem Vakƒ±f √úniversitesi",
    "Boƒüazi√ßi √úniversitesi",
    "Demiroƒülu Bilim √úniversitesi",
    "Doƒüu≈ü √úniversitesi",
    "Fatih Sultan Mehmet Vakƒ±f √úniversitesi",
    "Fenerbah√ße √úniversitesi",
    "Galatasaray √úniversitesi",
    "Hali√ß √úniversitesi",
    "I≈üƒ±k √úniversitesi",
    "ƒ∞bn Haldun √úniversitesi",
    "ƒ∞stanbul Medeniyet √úniversitesi",
    "ƒ∞stanbul Teknik √úniversitesi",
    "ƒ∞stanbul √úniversitesi",
    "ƒ∞stanbul √úniversitesi-Cerrahpa≈üa",
    "Marmara √úniversitesi",
    "Mimar Sinan G√ºzel Sanatlar √úniversitesi",
    "Saƒülƒ±k Bilimleri √úniversitesi",
    "T√ºrk-Alman √úniversitesi",
    "Yƒ±ldƒ±z Teknik √úniversitesi",
    "ƒ∞stanbul 29 Mayƒ±s √úniversitesi",
    "ƒ∞stanbul Arel √úniversitesi",
    "ƒ∞stanbul Atlas √úniversitesi",
    "ƒ∞stanbul Aydƒ±n √úniversitesi",
    "ƒ∞stanbul Beykent √úniversitesi",
    "ƒ∞stanbul Bilgi √úniversitesi",
    "ƒ∞stanbul Esenyurt √úniversitesi",
    "ƒ∞stanbul Galata √úniversitesi",
    "ƒ∞stanbul Gedik √úniversitesi",
    "ƒ∞stanbul Geli≈üim √úniversitesi",
    "ƒ∞stanbul Kent √úniversitesi",
    "ƒ∞stanbul K√ºlt√ºr √úniversitesi",
    "ƒ∞stanbul Medeniyet √úniversitesi",
    "ƒ∞stanbul Medipol √úniversitesi",
    "ƒ∞stanbul Ni≈üanta≈üƒ± √úniversitesi",
    "ƒ∞stanbul Okan √úniversitesi",
    "ƒ∞stanbul Rumeli √úniversitesi",
    "ƒ∞stanbul Sabahattin Zaim √úniversitesi",
    "ƒ∞stanbul Saƒülƒ±k ve Sosyal Bilimler Meslek Y√ºksekOkulu",
    "ƒ∞stanbul Saƒülƒ±k ve Teknoloji √úniversitesi",
    "ƒ∞stanbul ≈ûi≈üli Meslek Y√ºksekokulu"
];

const departments = [
    "Abaza Dili ve Edebiyatƒ±",
    "A√ßƒ±k Deniz Sondaj Teknolojisi",
    "A√ßƒ±k Deniz Tabanƒ± Uygulamalarƒ± Teknolojisi",
    "Acil Durum ve Afet Y√∂netimi",
    "Acil Durum ve Afet Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Acil Yardƒ±m ve Afet Y√∂netimi",
    "Acil Yardƒ±m ve Afet Y√∂netimi (Fak√ºlte)",
    "Acil Yardƒ±m ve Afet Y√∂netimi (Y√ºksekokul)",
    "Adalet",
    "Adli Bilimler",
    "Adli Bili≈üim M√ºhendisliƒüi",
    "Adli Bili≈üim M√ºhendisliƒüi (M.T.O.K.)",
    "Aƒüa√ß ƒ∞≈üleri End√ºstri M√ºhendisliƒüi",
    "Aƒüa√ß ƒ∞≈üleri End√ºstri M√ºhendisliƒüi (M.T.O.K.)",
    "Aƒüƒ±z ve Di≈ü Saƒülƒ±ƒüƒ±",
    "Aile ve T√ºketici Bilimleri",
    "Akt√ºerya Bilimleri",
    "Alman Dili ve Edebiyatƒ±",
    "Almanca M√ºtercim ve Terc√ºmanlƒ±k",
    "Almanca √ñƒüretmenliƒüi",
    "Alternatif Enerji Kaynaklarƒ± Teknolojisi",
    "Ambalaj Tasarƒ±mƒ±",
    "Ameliyathane Hizmetleri",
    "Amerikan K√ºlt√ºr√º ve Edebiyatƒ±",
    "Anestezi",
    "Antren√∂rl√ºk Eƒüitimi",
    "Antropoloji",
    "Arap Dili ve Edebiyatƒ±",
    "Arap√ßa M√ºtercim ve Terc√ºmanlƒ±k",
    "Arap√ßa M√ºtercim ve Terc√ºmanlƒ±k (Fak√ºlte)",
    "Arap√ßa M√ºtercim ve Terc√ºmanlƒ±k (Y√ºksekokul)",
    "Arap√ßa √ñƒüretmenliƒüi",
    "Arƒ±cƒ±lƒ±k",
    "Arka-Y√ºz Yazƒ±lƒ±m Geli≈ütirme",
    "Arkeoloji",
    "Arkeoloji ve Sanat Tarihi",
    "Arnavut Dili ve Edebiyatƒ±",
    "A≈ü√ßƒ±lƒ±k",
    "A≈ü√ßƒ±lƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Astronomi ve Uzay Bilimleri",
    "At√ßƒ±lƒ±k ve Antren√∂rl√ºƒü√º",
    "Atƒ±k Y√∂netimi",
    "Avcƒ±lƒ±k ve Yaban Hayatƒ±",
    "Ayakkabƒ± Tasarƒ±m ve √úretimi",
    "Ayakkabƒ± Tasarƒ±mƒ± ve √úretimi",
    "Azerbaycan T√ºrk√ßesi ve Edebiyatƒ±",
    "Baƒücƒ±lƒ±k",
    "Baƒücƒ±lƒ±k ve Baƒü √úr√ºnleri Teknolojisi",
    "Bah√ße Bitkileri",
    "Bah√ße Tarƒ±mƒ±",
    "Balƒ±k√ßƒ±lƒ±k Teknolojisi M√ºhendisliƒüi",
    "Bankacƒ±lƒ±k",
    "Bankacƒ±lƒ±k ve Finans",
    "Bankacƒ±lƒ±k ve Sigortacƒ±lƒ±k",
    "Bankacƒ±lƒ±k ve Sigortacƒ±lƒ±k",
    "Bankacƒ±lƒ±k ve Sigortacƒ±lƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Bankacƒ±lƒ±k ve Sigortacƒ±lƒ±k (Fak√ºlte)",
    "Bankacƒ±lƒ±k ve Sigortacƒ±lƒ±k (√ñnlisans)",
    "Bankacƒ±lƒ±k ve Sigortacƒ±lƒ±k (Y√ºksekokul)",
    "Basƒ±m Teknolojileri",
    "Basƒ±m ve Yayƒ±m Teknolojileri",
    "Basƒ±n ve Yayƒ±n",
    "Batƒ± Dilleri",
    "Beden Eƒüitimi ve Spor √ñƒüretmenliƒüi",
    "Beden Eƒüitimi ve Spor √ñƒüretmenliƒüi (Y√ºksekokul)",
    "Beslenme ve Diyetetik",
    "Beslenme ve Diyetetik (Fak√ºlte)",
    "Beslenme ve Diyetetik (Y√ºksekokul)",
    "Bƒ±√ßak√ßƒ±lƒ±k ve El Aletleri √úretim Teknolojisi",
    "Bilgi G√ºvenliƒüi Teknolojisi",
    "Bilgi G√ºvenliƒüi Teknolojisi (Fak√ºlte)",
    "Bilgi G√ºvenliƒüi Teknolojisi (Y√ºksekokul)",
    "Bilgi ve Belge Y√∂netimi",
    "Bilgi Y√∂netimi",
    "Bilgi Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Bilgisayar Bilimleri",
    "Bilgisayar Bilimleri ve M√ºhendisliƒüi",
    "Bilgisayar Destekli Tasarƒ±m ve Animasyon",
    "Bilgisayar M√ºhendisliƒüi",
    "Bilgisayar M√ºhendisliƒüi (M.T.O.K.)",
    "Bilgisayar Operat√∂rl√ºƒü√º",
    "Bilgisayar Programcƒ±lƒ±ƒüƒ±",
    "Bilgisayar Programcƒ±lƒ±ƒüƒ± (A√ßƒ±k√∂ƒüretim)",
    "Bilgisayar Teknolojisi",
    "Bilgisayar Teknolojisi ve Bili≈üim Sistemleri",
    "Bilgisayar ve √ñƒüretim Teknolojileri √ñƒüretmenliƒüi",
    "Bilim Tarihi",
    "Bili≈üim G√ºvenliƒüi Teknolojisi",
    "Bili≈üim Sistemleri M√ºhendisliƒüi",
    "Bili≈üim Sistemleri M√ºhendisliƒüi (M.T.O.K.)",
    "Bili≈üim Sistemleri ve Teknolojileri",
    "Bili≈üim Sistemleri ve Teknolojileri (Fak√ºlte)",
    "Bili≈üim Sistemleri ve Teknolojileri (Y√ºksekokul)",
    "Bitki Koruma",
    "Bitki Koruma",
    "Bitki Koruma (√ñnlisans)",
    "Bitkisel √úretim ve Teknolojileri",
    "Biyokimya",
    "Biyokimya",
    "Biyokimya (√ñnlisans)",
    "Biyoloji",
    "Biyoloji √ñƒüretmenliƒüi",
    "Biyomedikal Cihaz Teknolojisi",
    "Biyomedikal M√ºhendisliƒüi",
    "Biyomedikal M√ºhendisliƒüi (M.T.O.K.)",
    "Biyom√ºhendislik",
    "Biyosistem M√ºhendisliƒüi",
    "Biyoteknoloji",
    "Bo≈ünak Dili ve Edebiyatƒ±",
    "Boya Teknolojisi",
    "Bulgar Dili ve Edebiyatƒ±",
    "Bulgarca M√ºtercim ve Terc√ºmanlƒ±k",
    "Bulut Bili≈üim Operat√∂rl√ºƒü√º",
    "B√ºro Y√∂netimi ve Y√∂netici Asistanlƒ±ƒüƒ±",
    "B√ºro Y√∂netimi ve Y√∂netici Asistanlƒ±ƒüƒ± (A√ßƒ±k√∂ƒüretim)",
    "B√ºy√ºk Veri Analistliƒüi",
    "Cevher Hazƒ±rlama M√ºhendisliƒüi",
    "Ceza ƒ∞nfaz ve G√ºvenlik Hizmetleri",
    "CNC Programlama ve Operat√∂rl√ºƒü√º",
    "Coƒürafi Bilgi Sistemleri",
    "Coƒürafi Bilgi Sistemleri (A√ßƒ±k√∂ƒüretim)",
    "Coƒürafya",
    "Coƒürafya (A√ßƒ±k√∂ƒüretim)",
    "Coƒürafya √ñƒüretmenliƒüi",
    "√áaƒüda≈ü T√ºrk Leh√ßeleri ve Edebiyatlarƒ±",
    "√áaƒüda≈ü Yunan Dili ve Edebiyatƒ±",
    "√áaƒürƒ± Merkezi Hizmetleri",
    "√áaƒürƒ± Merkezi Hizmetleri (A√ßƒ±k√∂ƒüretim)",
    "√áalƒ±≈üma Ekonomisi ve End√ºstri ƒ∞li≈ükileri",
    "√áalƒ±≈üma Ekonomisi ve End√ºstri ƒ∞li≈ükileri (A√ßƒ±k√∂ƒüretim)",
    "√áay Tarƒ±mƒ± ve ƒ∞≈üleme Teknolojisi",
    "√áerkez Dili ve K√ºlt√ºr√º",
    "√áeviribilimi",
    "√áevre Koruma ve Kontrol",
    "√áevre M√ºhendisliƒüi",
    "√áevre Saƒülƒ±ƒüƒ±",
    "√áevre Temizliƒüi ve Denetimi",
    "√áim Alan Tesisi ve Y√∂netimi",
    "√áin Dili ve Edebiyatƒ±",
    "√áince M√ºtercim ve Terc√ºmanlƒ±k",
    "√áini Sanatƒ± ve Tasarƒ±mƒ±",
    "√áizgi Film ve Animasyon",
    "√áocuk Geli≈üimi",
    "√áocuk Geli≈üimi",
    "√áocuk Geli≈üimi (A√ßƒ±k√∂ƒüretim)",
    "√áocuk Geli≈üimi (A√ßƒ±k√∂ƒüretim)",
    "√áocuk Geli≈üimi (Fak√ºlte)",
    "√áocuk Geli≈üimi (√ñnlisans)",
    "√áocuk Geli≈üimi (Y√ºksekokul)",
    "√áocuk Koruma ve Bakƒ±m Hizmetleri",
    "√áok Boyutlu Modelleme ve Animasyon",
    "Deniz Brokerliƒüi",
    "Deniz Ula≈ütƒ±rma ƒ∞≈ületme M√ºhendisliƒüi",
    "Deniz Ula≈ütƒ±rma ƒ∞≈ületme M√ºhendisliƒüi (Fak√ºlte)",
    "Deniz Ula≈ütƒ±rma ƒ∞≈ületme M√ºhendisliƒüi (Y√ºksekokul)",
    "Deniz Ula≈ütƒ±rma ve ƒ∞≈ületme",
    "Deniz ve Liman ƒ∞≈ületmeciliƒüi",
    "Denizcilik ƒ∞≈ületmeleri Y√∂netimi",
    "Deri M√ºhendisliƒüi",
    "Deri Teknolojisi",
    "Dezenfeksiyon, Sterilizasyon ve Antisepsi Teknikerliƒüi",
    "Dijital D√∂n√º≈ü√ºm Elektroniƒüi",
    "Dijital Fabrika Teknolojileri",
    "Dijital Oyun Tasarƒ±mƒ±",
    "Dil ve Konu≈üma Terapisi",
    "Dil ve Konu≈üma Terapisi (Fak√ºlte)",
    "Dil ve Konu≈üma Terapisi (Y√ºksekokul)",
    "Dilbilimi",
    "Di≈ü Hekimliƒüi",
    "Di≈ü Hekimliƒüi",
    "Di≈ü Protez Teknolojisi",
    "Dƒ±≈ü Ticaret",
    "Dƒ±≈ü Ticaret (A√ßƒ±k√∂ƒüretim)",
    "Diyaliz",
    "Doƒüal Yapƒ± Ta≈ülarƒ± Teknolojisi",
    "Doƒüalgaz ve Tesisatƒ± Teknolojisi",
    "Doƒüu Dilleri",
    "D√∂k√ºm",
    "E-Ticaret",
    "E-Ticaret ve Pazarlama",
    "E-Ticaret ve Pazarlama (A√ßƒ±k√∂ƒüretim)",
    "Ebelik",
    "Ebelik (Fak√ºlte)",
    "Ebelik (Y√ºksekokul)",
    "Eczacƒ±lƒ±k",
    "Eczane Hizmetleri",
    "Egzersiz ve Spor Bilimleri",
    "Egzersiz ve Spor Bilimleri (A√ßƒ±k√∂ƒüretim)",
    "Ekonometri",
    "Ekonomi",
    "Ekonomi ve Finans",
    "El Sanatlarƒ±",
    "El Sanatlarƒ± (M.T.O.K.)",
    "Elektrik",
    "Elektrik Enerjisi √úretim, ƒ∞letim ve Daƒüƒ±tƒ±mƒ±",
    "Elektrik Enerjisi √úretim, ƒ∞letim ve Daƒüƒ±tƒ±mƒ± (A√ßƒ±k√∂ƒüretim)",
    "Elektrik M√ºhendisliƒüi",
    "Elektrik-Elektronik M√ºhendisliƒüi",
    "Elektrik-Elektronik M√ºhendisliƒüi (M.T.O.K.)",
    "Elektrikli Cihaz Teknolojisi",
    "Elektronik Haberle≈üme Teknolojisi",
    "Elektronik M√ºhendisliƒüi",
    "Elektronik Teknolojisi",
    "Elektronik Ticaret ve Y√∂netimi",
    "Elektronik Ticaret ve Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Elektronik ve Haberle≈üme M√ºhendisliƒüi",
    "Elektron√∂rofizyoloji",
    "Emlak ve Emlak Y√∂netimi",
    "Emlak Y√∂netimi",
    "Emlak Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "End√ºstri M√ºhendisliƒüi",
    "End√ºstri √úr√ºnleri Tasarƒ±mƒ±",
    "End√ºstri Y√∂netimi M√ºhendisliƒüi",
    "End√ºstriyel Cam ve Seramik",
    "End√ºstriyel Hammaddeler ƒ∞≈üleme Teknolojisi",
    "End√ºstriyel Kalƒ±p√ßƒ±lƒ±k",
    "End√ºstriyel Tasarƒ±m",
    "End√ºstriyel Tasarƒ±m (Fak√ºlte)",
    "End√ºstriyel Tasarƒ±m (Y√ºksekokul)",
    "End√ºstriyel Tasarƒ±m M√ºhendisliƒüi",
    "End√ºstriyel Tasarƒ±m M√ºhendisliƒüi (M.T.O.K.)",
    "Enerji Bilimi ve Teknolojileri",
    "Enerji Sistemleri M√ºhendisliƒüi",
    "Enerji Sistemleri M√ºhendisliƒüi (M.T.O.K.)",
    "Enerji Tesisleri ƒ∞≈ületmeciliƒüi",
    "Enerji Y√∂netimi",
    "Engelli Bakƒ±mƒ± ve Rehabilitasyon",
    "Engelli Bakƒ±mƒ± ve Rehabilitasyon (A√ßƒ±k√∂ƒüretim)",
    "Engelliler ƒ∞√ßin G√∂lge √ñƒüreticilik",
    "Ergoterapi",
    "Ermeni Dili ve K√ºlt√ºr√º",
    "Eser Koruma",
    "Eski Yunan Dili ve Edebiyatƒ±",
    "Et ve √úr√ºnleri Teknolojisi",
    "Ev ƒ∞daresi (A√ßƒ±k√∂ƒüretim)",
    "Evde Hasta Bakƒ±mƒ±",
    "Fars Dili ve Edebiyatƒ±",
    "Fars√ßa M√ºtercim ve Terc√ºmanlƒ±k",
    "Felsefe",
    "Felsefe (A√ßƒ±k√∂ƒüretim)",
    "Felsefe Grubu √ñƒüretmenliƒüi",
    "Fen Bilgisi √ñƒüretmenliƒüi",
    "Fidan Yeti≈ütiriciliƒüi",
    "Film Tasarƒ±mƒ± ve Yazarlƒ±ƒüƒ±",
    "Film Tasarƒ±mƒ± ve Y√∂netimi",
    "Film Tasarƒ±mƒ± ve Y√∂netmenliƒüi",
    "Finans ve Bankacƒ±lƒ±k",
    "Finans ve Bankacƒ±lƒ±k (Fak√ºlte)",
    "Finans ve Bankacƒ±lƒ±k (Y√ºksekokul)",
    "Fƒ±ndƒ±k Eksperliƒüi",
    "Fizik",
    "Fizik M√ºhendisliƒüi",
    "Fizik √ñƒüretmenliƒüi",
    "Fizyoterapi",
    "Fizyoterapi ve Rehabilitasyon",
    "Fizyoterapi ve Rehabilitasyon (Fak√ºlte)",
    "Fizyoterapi ve Rehabilitasyon (Y√ºksekokul)",
    "Fotoƒüraf",
    "Fotoƒüraf ve Video",
    "Fotoƒüraf√ßƒ±lƒ±k ve Kameramanlƒ±k",
    "Fotoƒüraf√ßƒ±lƒ±k ve Kameramanlƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Fotonik",
    "Fransƒ±z Dili ve Edebiyatƒ±",
    "Fransƒ±zca M√ºtercim ve Terc√ºmanlƒ±k",
    "Fransƒ±zca √ñƒüretmenliƒüi",
    "Gastronomi ve Mutfak Sanatlarƒ±",
    "Gastronomi ve Mutfak Sanatlarƒ± (Fak√ºlte)",
    "Gastronomi ve Mutfak Sanatlarƒ± (Fak√ºlte) (M.T.O.K.)",
    "Gastronomi ve Mutfak Sanatlarƒ± (Y√ºksekokul)",
    "Gayrimenkul Geli≈ütirme ve Y√∂netimi",
    "Gazetecilik",
    "Geleneksel El Sanatlarƒ±",
    "Geleneksel Tekstillerin Korunmasƒ± ve Restorasyonu",
    "Geleneksel T√ºrk Sanatlarƒ±",
    "Gemi ƒ∞n≈üaatƒ±",
    "Gemi ƒ∞n≈üaatƒ± ve Gemi Makineleri M√ºhendisliƒüi",
    "Gemi Makineleri ƒ∞≈ületme M√ºhendisliƒüi",
    "Gemi Makineleri ƒ∞≈ületmeciliƒüi",
    "Gemi ve Deniz Teknolojisi M√ºhendisliƒüi",
    "Gemi ve Yat Tasarƒ±mƒ±",
    "Genetik ve Biyom√ºhendislik",
    "Genetik ve Ya≈üam Bilimleri Programlarƒ±",
    "Geomatik M√ºhendisliƒüi",
    "Geoteknik",
    "Gerontoloji",
    "Gƒ±da Kalite Kontrol√º ve Analizi",
    "Gƒ±da M√ºhendisliƒüi",
    "Gƒ±da Teknolojisi",
    "Gƒ±da Teknolojisi",
    "Gƒ±da Teknolojisi (Fak√ºlte)",
    "Gƒ±da Teknolojisi (√ñnlisans)",
    "Gƒ±da Teknolojisi (Y√ºksekokul)",
    "Giri≈üimcilik",
    "Giyim √úretim Teknolojisi",
    "G√∂rsel ƒ∞leti≈üim",
    "G√∂rsel ƒ∞leti≈üim Tasarƒ±mƒ±",
    "G√∂rsel ƒ∞leti≈üim Tasarƒ±mƒ± (A√ßƒ±k√∂ƒüretim)",
    "G√∂rsel Sanatlar",
    "G√∂rsel Sanatlar ve ƒ∞leti≈üim Tasarƒ±mƒ±",
    "Grafik",
    "Grafik Sanatlar",
    "Grafik Sanatlar (A√ßƒ±k√∂ƒüretim)",
    "Grafik Tasarƒ±mƒ±",
    "Grafik Tasarƒ±mƒ±",
    "Grafik Tasarƒ±mƒ± (A√ßƒ±k√∂ƒüretim)",
    "Grafik Tasarƒ±mƒ± (√ñnlisans)",
    "G√ºmr√ºk ƒ∞≈ületme",
    "G√ºmr√ºk ƒ∞≈ületme (Fak√ºlte)",
    "G√ºmr√ºk ƒ∞≈ületme (Y√ºksekokul)",
    "G√ºrc√º Dili ve Edebiyatƒ±",
    "Halƒ±cƒ±lƒ±k ve Kilimcilik",
    "Halkbilimi",
    "Halkla ƒ∞li≈ükiler ve Pazarlama ƒ∞leti≈üimi",
    "Halkla ƒ∞li≈ükiler ve Reklamcƒ±lƒ±k",
    "Halkla ƒ∞li≈ükiler ve Reklamcƒ±lƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Halkla ƒ∞li≈ükiler ve Reklamcƒ±lƒ±k (Fak√ºlte)",
    "Halkla ƒ∞li≈ükiler ve Reklamcƒ±lƒ±k (Y√ºksekokul)",
    "Halkla ƒ∞li≈ükiler ve Tanƒ±tƒ±m",
    "Halkla ƒ∞li≈ükiler ve Tanƒ±tƒ±m",
    "Halkla ƒ∞li≈ükiler ve Tanƒ±tƒ±m (A√ßƒ±k√∂ƒüretim)",
    "Halkla ƒ∞li≈ükiler ve Tanƒ±tƒ±m (A√ßƒ±k√∂ƒüretim)",
    "Halkla ƒ∞li≈ükiler ve Tanƒ±tƒ±m (√ñnlisans)",
    "Harita M√ºhendisliƒüi",
    "Harita ve Kadastro",
    "Hasta Bakƒ±mƒ±",
    "Hava Aracƒ± ƒ∞malat Teknolojileri",
    "Hava Lojistiƒüi",
    "Havacƒ±lƒ±k Elektrik ve Elektroniƒüi",
    "Havacƒ±lƒ±k Elektrik ve Elektroniƒüi (Fak√ºlte)",
    "Havacƒ±lƒ±k Elektrik ve Elektroniƒüi (Y√ºksekokul)",
    "Havacƒ±lƒ±k ve Uzay M√ºhendisliƒüi",
    "Havacƒ±lƒ±k Y√∂netimi",
    "Havacƒ±lƒ±k Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Havacƒ±lƒ±k Y√∂netimi (Fak√ºlte)",
    "Havacƒ±lƒ±k Y√∂netimi (Y√ºksekokul)",
    "Hayvansal √úretim ve Teknolojileri",
    "Hayvansal √úretim ve Teknolojileri (Fak√ºlte)",
    "Hayvansal √úretim ve Teknolojileri (Y√ºksekokul)",
    "Hem≈üirelik (Fak√ºlte)",
    "Hem≈üirelik (Y√ºksekokul)",
    "Hibrid ve Elektrikli Ta≈üƒ±tlar Teknolojisi",
    "Hidrojeoloji M√ºhendisliƒüi",
    "Hindoloji",
    "Hititoloji",
    "Hukuk",
    "Hukuk B√ºro Y√∂netimi ve Sekreterliƒüi",
    "Hukuk B√ºro Y√∂netimi ve Sekreterliƒüi (A√ßƒ±k√∂ƒüretim)",
    "Hungaroloji",
    "ƒ∞brani Dili ve K√ºlt√ºr√º",
    "ƒ∞√ß Mekan Tasarƒ±mƒ±",
    "ƒ∞√ß Mimarlƒ±k",
    "ƒ∞√ß Mimarlƒ±k ve √áevre Tasarƒ±mƒ±",
    "ƒ∞√ß Mimarlƒ±k ve Mobilya Tasarƒ±mƒ±",
    "ƒ∞klim Bilimi ve Meteoroloji M√ºhendisliƒüi",
    "ƒ∞klimlendirme ve Soƒüutma Teknolojisi",
    "ƒ∞kram Hizmetleri",
    "ƒ∞ktisadi ve ƒ∞dari Bilimler Programlarƒ±",
    "ƒ∞ktisadi ve ƒ∞dari Programlar",
    "ƒ∞ktisat",
    "ƒ∞ktisat (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞lahiyat",
    "ƒ∞lahiyat (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞lahiyat (M.T.O.K.)",
    "ƒ∞leti≈üim",
    "ƒ∞leti≈üim Bilimleri",
    "ƒ∞leti≈üim Sanatlarƒ±",
    "ƒ∞leti≈üim Tasarƒ±mƒ± ve Y√∂netimi",
    "ƒ∞leti≈üim ve Tasarƒ±mƒ±",
    "ƒ∞lk ve Acil Yardƒ±m",
    "ƒ∞lk√∂ƒüretim Matematik √ñƒüretmenliƒüi",
    "ƒ∞malat M√ºhendisliƒüi",
    "ƒ∞malat Y√ºr√ºtme Sistemleri Operat√∂rl√ºƒü√º",
    "ƒ∞ngiliz Dilbilimi",
    "ƒ∞ngiliz Dili ve Edebiyatƒ±",
    "ƒ∞ngiliz ve Rus Dilleri ve Edebiyatlarƒ±",
    "ƒ∞ngilizce M√ºtercim ve Terc√ºmanlƒ±k",
    "ƒ∞ngilizce M√ºtercim ve Terc√ºmanlƒ±k (Fak√ºlte)",
    "ƒ∞ngilizce M√ºtercim ve Terc√ºmanlƒ±k (Y√ºksekokul)",
    "ƒ∞ngilizce √ñƒüretmenliƒüi",
    "ƒ∞ngilizce √ñƒüretmenliƒüi",
    "ƒ∞ngilizce, Fransƒ±zca M√ºtercim ve Terc√ºmanlƒ±k",
    "ƒ∞n≈üaat M√ºhendisliƒüi",
    "ƒ∞n≈üaat M√ºhendisliƒüi (M.T.O.K.)",
    "ƒ∞n≈üaat Teknolojisi",
    "ƒ∞nsan Kaynaklarƒ± Y√∂netimi",
    "ƒ∞nsan Kaynaklarƒ± Y√∂netimi",
    "ƒ∞nsan Kaynaklarƒ± Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞nsan Kaynaklarƒ± Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞nsan Kaynaklarƒ± Y√∂netimi (√ñnlisans)",
    "ƒ∞nsansƒ±z Ara√ß Teknikerliƒüi",
    "ƒ∞nsansƒ±z Hava Aracƒ± Teknolojisi ve Operat√∂rl√ºƒü√º",
    "ƒ∞nternet ve Aƒü Teknolojileri",
    "ƒ∞≈ü Makineleri Operat√∂rl√ºƒü√º",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi (Fak√ºlte)",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi (√ñnlisans)",
    "ƒ∞≈ü Saƒülƒ±ƒüƒ± ve G√ºvenliƒüi (Y√ºksekokul)",
    "ƒ∞≈ü ve Uƒüra≈üƒ± Terapisi",
    "ƒ∞slam Bilimleri",
    "ƒ∞slam ƒ∞ktisadƒ± ve Finans",
    "ƒ∞slami ƒ∞limler",
    "ƒ∞slami ƒ∞limler (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞slami ƒ∞limler (M.T.O.K.)",
    "ƒ∞≈ületme",
    "ƒ∞≈ületme (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞≈ületme M√ºhendisliƒüi",
    "ƒ∞≈ületme Y√∂netimi",
    "ƒ∞≈ületme Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "ƒ∞spanyol Dili ve Edebiyatƒ±",
    "ƒ∞statistik",
    "ƒ∞statistik ve Bilgisayar Bilimleri",
    "ƒ∞talyan Dili ve Edebiyatƒ±",
    "Japon Dili ve Edebiyatƒ±",
    "Japonca M√ºtercim ve Terc√ºmanlƒ±k",
    "Japonca √ñƒüretmenliƒüi",
    "Jeofizik M√ºhendisliƒüi",
    "Jeoloji M√ºhendisliƒüi",
    "Kamu Y√∂netimi",
    "Kamu Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Kanatlƒ± Hayvan Yeti≈ütiriciliƒüi",
    "Kar≈üƒ±la≈ütƒ±rmalƒ± Edebiyat",
    "Kaynak Teknolojisi",
    "Kazak Dili ve Edebiyatƒ±",
    "Kenevir Dokuma Tezgahtarlƒ±ƒüƒ±",
    "Kenevir Dokumacƒ±lƒ±ƒüƒ±",
    "Kentsel Tasarƒ±m ve Peyzaj Mimarlƒ±ƒüƒ±",
    "Kimya",
    "Kimya M√ºhendisliƒüi",
    "Kimya √ñƒüretmenliƒüi",
    "Kimya Teknolojisi",
    "Kimya-Biyoloji M√ºhendisliƒüi",
    "Klasik Arkeoloji",
    "Kontrol ve Otomasyon M√ºhendisliƒüi",
    "Kontrol ve Otomasyon Teknolojisi",
    "Kooperatif√ßilik",
    "Kore Dili ve Edebiyatƒ±",
    "Kozmetik Teknolojisi",
    "K√ºlt√ºr Varlƒ±klarƒ±nƒ± Koruma ve Onarƒ±m",
    "K√ºlt√ºr Varlƒ±klarƒ±nƒ± Koruma ve Onarƒ±m (Fak√ºlte)",
    "K√ºlt√ºr Varlƒ±klarƒ±nƒ± Koruma ve Onarƒ±m (Y√ºksekokul)",
    "K√ºlt√ºr ve ƒ∞leti≈üim Bilimleri",
    "K√ºlt√ºrel Miras ve Turizm",
    "K√ºlt√ºrel Miras ve Turizm (A√ßƒ±k√∂ƒüretim)",
    "K√ºmes Hayvanlarƒ± Yeti≈ütiriciliƒüi",
    "K√ºresel Siyaset ve Uluslararasƒ± ƒ∞li≈ükiler",
    "Kurgu, Ses ve G√∂r√ºnt√º Y√∂netimi",
    "K√ºrt Dili ve Edebiyatƒ±",
    "Kurumsal Bili≈üim Uzmanlƒ±ƒüƒ±",
    "Kuyumculuk ve M√ºcevher Tasarƒ±mƒ±",
    "Kuyumculuk ve Takƒ± Tasarƒ±mƒ±",
    "Laborant ve Veteriner Saƒülƒ±k",
    "Laborant ve Veteriner Saƒülƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Laboratuvar Teknolojisi",
    "Latin Dili ve Edebiyatƒ±",
    "Leh Dili ve Edebiyatƒ±",
    "Lojistik",
    "Lojistik (A√ßƒ±k√∂ƒüretim)",
    "Lojistik Y√∂netimi",
    "Lojistik Y√∂netimi (Fak√ºlte)",
    "Lojistik Y√∂netimi (Y√ºksekokul)",
    "Maden M√ºhendisliƒüi",
    "Madencilik Teknolojisi",
    "Mahkeme B√ºro Hizmetleri",
    "Makine",
    "Makine M√ºhendisliƒüi",
    "Makine M√ºhendisliƒüi (M.T.O.K.)",
    "Makine Resim ve Konstr√ºksiyonu",
    "Maliye",
    "Maliye",
    "Maliye (A√ßƒ±k√∂ƒüretim)",
    "Maliye (√ñnlisans)",
    "Malzeme Bilimi ve M√ºhendisliƒüi",
    "Malzeme Bilimi ve Nanoteknoloji M√ºhendisliƒüi",
    "Malzeme Bilimi ve Teknolojileri",
    "Mantarcƒ±lƒ±k",
    "Marina ve Yat ƒ∞≈ületmeciliƒüi",
    "Marka ƒ∞leti≈üimi (A√ßƒ±k√∂ƒüretim)",
    "Matematik",
    "Matematik M√ºhendisliƒüi",
    "Matematik √ñƒüretmenliƒüi",
    "Matematik ve Bilgisayar Bilimleri",
    "Medya ve G√∂rsel Sanatlar",
    "Medya ve ƒ∞leti≈üim",
    "Medya ve ƒ∞leti≈üim",
    "Medya ve ƒ∞leti≈üim (A√ßƒ±k√∂ƒüretim)",
    "Medya ve ƒ∞leti≈üim (√ñnlisans)",
    "Mekatronik",
    "Mekatronik M√ºhendisliƒüi",
    "Mekatronik M√ºhendisliƒüi (M.T.O.K.)",
    "Menkul Kƒ±ymetler ve Sermaye Piyasasƒ±",
    "Menkul Kƒ±ymetler ve Sermaye Piyasasƒ± (A√ßƒ±k√∂ƒüretim)",
    "Mermer Teknolojisi",
    "Metalurji",
    "Metalurji ve Malzeme M√ºhendisliƒüi",
    "Metalurji ve Malzeme M√ºhendisliƒüi (M.T.O.K.)",
    "Meteoroloji M√ºhendisliƒüi",
    "Meyve ve Sebze ƒ∞≈üleme Teknolojisi",
    "Mimari Dekoratif Sanatlar",
    "Mimari Restorasyon",
    "Mimarlƒ±k",
    "Mobil Teknolojileri",
    "Mobilya ve Dekorasyon",
    "Moda Tasarƒ±mƒ±",
    "Moda Tasarƒ±mƒ±",
    "Moda Tasarƒ±mƒ± (Fak√ºlte)",
    "Moda Tasarƒ±mƒ± (Fak√ºlte) (M.T.O.K.)",
    "Moda Tasarƒ±mƒ± (√ñnlisans)",
    "Moda Tasarƒ±mƒ± (Y√ºksekokul)",
    "Moda Y√∂netimi",
    "Molek√ºler Biyoloji ve Genetik",
    "Molek√ºler Biyoteknoloji",
    "Muhasebe ve Finans Y√∂netimi",
    "Muhasebe ve Finans Y√∂netimi (Fak√ºlte)",
    "Muhasebe ve Finans Y√∂netimi (Y√ºksekokul)",
    "Muhasebe ve Vergi Uygulamalarƒ±",
    "Muhasebe ve Vergi Uygulamalarƒ± (A√ßƒ±k√∂ƒüretim)",
    "M√ºhendislik Programlarƒ±",
    "M√ºhendislik ve Doƒüa Bilimleri Programlarƒ±",
    "M√ºtercim-Terc√ºmanlƒ±k",
    "M√ºzecilik",
    "Nanobilim ve Nanoteknoloji",
    "Nanoteknoloji M√ºhendisliƒüi",
    "N√ºfus ve Vatanda≈ülƒ±k",
    "N√ºkleer Enerji M√ºhendisliƒüi",
    "N√ºkleer Teknoloji ve Radyasyon G√ºvenliƒüi",
    "N√ºkleer Tƒ±p Teknikleri",
    "Odyoloji",
    "Odyoloji (Fak√ºlte)",
    "Odyoloji (Y√ºksekokul)",
    "Odyometri",
    "Okul √ñncesi √ñƒüretmenliƒüi",
    "Optik ve Akustik M√ºhendisliƒüi",
    "Optisyenlik",
    "Organik Tarƒ±m",
    "Organik Tarƒ±m ƒ∞≈ületmeciliƒüi",
    "Organik Tarƒ±m ƒ∞≈ületmeciliƒüi (Fak√ºlte)",
    "Organik Tarƒ±m ƒ∞≈ületmeciliƒüi (Y√ºksekokul)",
    "Orman End√ºstrisi M√ºhendisliƒüi",
    "Orman M√ºhendisliƒüi",
    "Ormancƒ±lƒ±k ve Orman √úr√ºnleri",
    "Ortez ve Protez",
    "Ortopedik Protez ve Ortez",
    "Otel Y√∂neticiliƒüi",
    "Otob√ºs Kaptanlƒ±ƒüƒ±",
    "Otomotiv G√∂vde ve Y√ºzey ƒ∞≈ülem Teknolojileri",
    "Otomotiv M√ºhendisliƒüi",
    "Otomotiv M√ºhendisliƒüi (M.T.O.K.)",
    "Otomotiv Teknolojisi",
    "Otonom Sistemler Teknikerliƒüi",
    "Otopsi Yardƒ±mcƒ±lƒ±ƒüƒ±",
    "Oyun Geli≈ütirme ve Programlama",
    "√ñn-Y√ºz Yazƒ±lƒ±m Geli≈ütirme",
    "√ñzel Eƒüitim √ñƒüretmenliƒüi",
    "√ñzel G√ºvenlik ve Koruma",
    "Pastacƒ±lƒ±k ve Ekmek√ßilik",
    "Patoloji Laboratuvar Teknikleri",
    "Pazarlama",
    "Pazarlama",
    "Pazarlama (Fak√ºlte)",
    "Pazarlama (√ñnlisans)",
    "Pazarlama (Y√ºksekokul)",
    "Perakende Satƒ±≈ü ve Maƒüaza Y√∂netimi",
    "Perakende Satƒ±≈ü ve Maƒüaza Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Perf√ºzyon",
    "Petrol ve Doƒüalgaz M√ºhendisliƒüi",
    "Peyzaj Mimarlƒ±ƒüƒ±",
    "Peyzaj ve S√ºs Bitkileri Yeti≈ütiriciliƒüi",
    "Pilotaj",
    "Pilotaj (Fak√ºlte)",
    "Pilotaj (Y√ºksekokul)",
    "Podoloji",
    "Polimer Malzeme M√ºhendisliƒüi",
    "Polimer Teknolojisi",
    "Politika ve Ekonomi",
    "Posta Hizmetleri",
    "Protohistorya ve √ñn Asya Arkeolojisi",
    "Psikoloji",
    "Psikolojik Danƒ±≈ümanlƒ±k ve Rehberlik",
    "Psikolojik Danƒ±≈ümanlƒ±k ve Rehberlik √ñƒüretmenliƒüi",
    "Radyo ve Televizyon Programcƒ±lƒ±ƒüƒ±",
    "Radyo ve Televizyon Programcƒ±lƒ±ƒüƒ± (A√ßƒ±k√∂ƒüretim)",
    "Radyo ve Televizyon Teknolojisi",
    "Radyo, Televizyon ve Sinema",
    "Radyoterapi",
    "Rafineri ve Petro-Kimya Teknolojisi",
    "Raylƒ± Sistemler Elektrik ve Elektronik",
    "Raylƒ± Sistemler ƒ∞≈ületmeciliƒüi",
    "Raylƒ± Sistemler Makine Teknolojisi",
    "Raylƒ± Sistemler Makinistliƒüi",
    "Raylƒ± Sistemler M√ºhendisliƒüi",
    "Raylƒ± Sistemler Yol Teknolojisi",
    "Rehberlik ve Psikolojik Danƒ±≈ümanlƒ±k",
    "Reklam Tasarƒ±mƒ± ve ƒ∞leti≈üimi",
    "Reklamcƒ±lƒ±k",
    "Reklamcƒ±lƒ±k",
    "Reklamcƒ±lƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Reklamcƒ±lƒ±k (A√ßƒ±k√∂ƒüretim)",
    "Reklamcƒ±lƒ±k (√ñnlisans)",
    "Rekreasyon",
    "Rekreasyon (A√ßƒ±k√∂ƒüretim)",
    "Rekreasyon Y√∂netimi",
    "Rekreasyon Y√∂netimi (Fak√ºlte)",
    "Rekreasyon Y√∂netimi (Fak√ºlte) (M.T.O.K.)",
    "Rekreasyon Y√∂netimi (Y√ºksekokul)",
    "Robotik ve Otonom Sistemleri M√ºhendisliƒüi",
    "Robotik ve Yapay Zek√¢",
    "Rus Dili ve Edebiyatƒ±",
    "Rus Dili ve Edebiyatƒ± √ñƒüretmenliƒüi",
    "Rus ve ƒ∞ngiliz Dilleri ve Edebiyatlarƒ±",
    "Rus√ßa M√ºtercim ve Terc√ºmanlƒ±k",
    "Rus√ßa M√ºtercim ve Terc√ºmanlƒ±k (Fak√ºlte)",
    "Sa√ß Bakƒ±mƒ± ve G√ºzellik Hizmetleri",
    "Saƒülƒ±k Bilgi Sistemleri Teknikerliƒüi",
    "Saƒülƒ±k Kurumlarƒ± ƒ∞≈ületmeciliƒüi",
    "Saƒülƒ±k Kurumlarƒ± ƒ∞≈ületmeciliƒüi (A√ßƒ±k√∂ƒüretim)",
    "Saƒülƒ±k Turizmi ƒ∞≈ületmeciliƒüi",
    "Saƒülƒ±k Y√∂netimi",
    "Saƒülƒ±k Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Saƒülƒ±k Y√∂netimi (Fak√ºlte)",
    "Saƒülƒ±k Y√∂netimi (Y√ºksekokul)",
    "Sahne I≈üƒ±k ve Ses Teknolojileri",
    "Sahne ve Dekor Tasarƒ±mƒ±",
    "Sanal ve Artƒ±rƒ±lmƒ±≈ü Ger√ßeklik",
    "Sanat Tarihi",
    "Sanat ve K√ºlt√ºr Y√∂netimi",
    "Sanat ve Sosyal Bilimler Programlarƒ±",
    "Seracƒ±lƒ±k",
    "Seramik ve Cam Tasarƒ±mƒ±",
    "Sermaye Piyasasƒ±",
    "Seyahat ƒ∞≈ületmeciliƒüi",
    "Seyahat ƒ∞≈ületmeciliƒüi ve Turizm Rehberliƒüi",
    "Siber G√ºvenlik",
    "Siber G√ºvenlik Analistliƒüi ve Operat√∂rl√ºƒü√º",
    "Siber G√ºvenlik M√ºhendisliƒüi",
    "Sigortacƒ±lƒ±k",
    "Sigortacƒ±lƒ±k (Fak√ºlte)",
    "Sigortacƒ±lƒ±k (Y√ºksekokul)",
    "Sigortacƒ±lƒ±k ve Akt√ºerya Bilimleri",
    "Sigortacƒ±lƒ±k ve Risk Y√∂netimi",
    "Sigortacƒ±lƒ±k ve Sosyal G√ºvenlik",
    "Silah Sanayi Teknikerliƒüi",
    "Sinema ve Dijital Medya",
    "Sinema ve Televizyon",
    "Sƒ±nƒ±f √ñƒüretmenliƒüi",
    "Sinoloji",
    "Sivil Hava Ula≈ütƒ±rma ƒ∞≈ületmeciliƒüi",
    "Sivil Hava Ula≈ütƒ±rma ƒ∞≈ületmeciliƒüi (A√ßƒ±k√∂ƒüretim)",
    "Sivil Havacƒ±lƒ±k Kabin Hizmetleri",
    "Sivil Savunma ve ƒ∞tfaiyecilik",
    "Siyasal Bilimler",
    "Siyaset Bilimi",
    "Siyaset Bilimi ve Kamu Y√∂netimi",
    "Siyaset Bilimi ve Kamu Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Siyaset Bilimi ve Uluslararasƒ± ƒ∞li≈ükiler",
    "Siyaset Bilimi ve Uluslararasƒ± ƒ∞li≈ükiler (A√ßƒ±k√∂ƒüretim)",
    "Sondaj Teknolojisi",
    "Sosyal Bilgiler √ñƒüretmenliƒüi",
    "Sosyal G√ºvenlik",
    "Sosyal Hizmet",
    "Sosyal Hizmet (A√ßƒ±k√∂ƒüretim)",
    "Sosyal Hizmet (Fak√ºlte)",
    "Sosyal Hizmet (Y√ºksekokul)",
    "Sosyal Hizmetler",
    "Sosyal Hizmetler (A√ßƒ±k√∂ƒüretim)",
    "Sosyal Medya Y√∂neticiliƒüi (A√ßƒ±k√∂ƒüretim)",
    "Sosyoloji",
    "Sosyoloji (A√ßƒ±k√∂ƒüretim)",
    "Spor Y√∂neticiliƒüi",
    "Spor Y√∂neticiliƒüi (Fak√ºlte)",
    "Spor Y√∂neticiliƒüi (Y√ºksekokul)",
    "Spor Y√∂netimi",
    "Spor Y√∂netimi (A√ßƒ±k√∂ƒüretim)",
    "Su Altƒ± Kaynak Teknolojisi",
    "Su Altƒ± Teknolojisi",
    "Su Bilimleri ve M√ºhendisliƒüi",
    "Su √úr√ºnleri End√ºstrisi M√ºhendisliƒüi",
    "Su √úr√ºnleri ƒ∞≈üleme Teknolojisi",
    "Su √úr√ºnleri M√ºhendisliƒüi",
    "Sulama Teknolojisi",
    "S√ºmeroloji",
    "S√ºryani Dili ve Edebiyatƒ±",
    "S√ºt Teknolojisi",
    "S√ºt ve Besi Hayvancƒ±lƒ±ƒüƒ±",
    "S√ºt ve √úr√ºnleri Teknolojisi",
    "≈ûarap √úretim Teknolojisi",
    "≈ûehir ve B√∂lge Planlama",
    "Tahribatsƒ±z Muayene",
    "Takƒ± Tasarƒ±mƒ±",
    "Takƒ± Tasarƒ±mƒ± (Fak√ºlte)",
    "Takƒ± Tasarƒ±mƒ± (Y√ºksekokul)",
    "Takƒ± Tasarƒ±mƒ± ve ƒ∞malatƒ±",
    "Tapu Kadastro",
    "Tapu ve Kadastro",
    "Tarih",
    "Tarih (A√ßƒ±k√∂ƒüretim)",
    "Tarih √ñƒüretmenliƒüi",
    "Tarih √ñncesi Arkeolojisi",
    "Tarƒ±m Ekonomisi",
    "Tarƒ±m Makineleri",
    "Tarƒ±m Makineleri ve Teknolojileri M√ºhendisliƒüi",
    "Tarƒ±m Teknolojisi (A√ßƒ±k√∂ƒüretim)",
    "Tarƒ±m Ticareti ve ƒ∞≈ületmeciliƒüi",
    "Tarƒ±msal Biyoteknoloji",
    "Tarƒ±msal Genetik M√ºhendisliƒüi",
    "Tarƒ±msal ƒ∞≈ületmecilik",
    "Tarƒ±msal Yapƒ±lar ve Sulama",
    "Tarla Bitkileri",
    "Tarla Bitkileri",
    "Tarla Bitkileri (√ñnlisans)",
    "Teknoloji ve Bilgi Y√∂netimi",
    "Tekstil M√ºhendisliƒüi",
    "Tekstil M√ºhendisliƒüi (M.T.O.K.)",
    "Tekstil Tasarƒ±mƒ±",
    "Tekstil Tasarƒ±mƒ± (M.T.O.K.)",
    "Tekstil Teknolojisi",
    "Tekstil ve Halƒ± Makineleri",
    "Tekstil ve Moda Tasarƒ±mƒ±",
    "Tekstil ve Moda Tasarƒ±mƒ± (A√ßƒ±k√∂ƒüretim)",
    "Tekstil ve Moda Tasarƒ±mƒ± (Fak√ºlte)",
    "Tekstil ve Moda Tasarƒ±mƒ± (Y√ºksekokul)",
    "Televizyon Haberciliƒüi ve Programcƒ±lƒ±ƒüƒ±",
    "Tƒ±bbi Dok√ºmantasyon ve Sekreterlik",
    "Tƒ±bbi Dok√ºmantasyon ve Sekreterlik (A√ßƒ±k√∂ƒüretim)",
    "Tƒ±bbi G√∂r√ºnt√ºleme Teknikleri",
    "Tƒ±bbi Laboratuvar Teknikleri",
    "Tƒ±bbi Tanƒ±tƒ±m ve Pazarlama",
    "Tƒ±bbi ve Aromatik Bitkiler",
    "Tƒ±p",
    "Tƒ±p M√ºhendisliƒüi",
    "Tiyatro Ele≈ütirmenliƒüi ve Dramaturji",
    "Tohum Bilimi ve Teknolojisi",
    "Tohumculuk Teknolojisi",
    "Toprak Bilimi ve Bitki Besleme",
    "Turist Rehberliƒüi",
    "Turizm Animasyonu",
    "Turizm ƒ∞≈ületmeciliƒüi",
    "Turizm ƒ∞≈ületmeciliƒüi (Fak√ºlte)",
    "Turizm ƒ∞≈ületmeciliƒüi (Y√ºksekokul)",
    "Turizm Rehberliƒüi",
    "Turizm Rehberliƒüi (Fak√ºlte)",
    "Turizm Rehberliƒüi (Y√ºksekokul)",
    "Turizm ve Otel ƒ∞≈ületmeciliƒüi",
    "Turizm ve Otel ƒ∞≈ületmeciliƒüi",
    "Turizm ve Otel ƒ∞≈ületmeciliƒüi (A√ßƒ±k√∂ƒüretim)",
    "Turizm ve Otel ƒ∞≈ületmeciliƒüi (√ñnlisans)",
    "Turizm ve Seyahat Hizmetleri",
    "T√ºrk Dili ve Edebiyatƒ±",
    "T√ºrk Dili ve Edebiyatƒ± (A√ßƒ±k√∂ƒüretim)",
    "T√ºrk Dili ve Edebiyatƒ± √ñƒüretmenliƒüi",
    "T√ºrk Halkbilimi",
    "T√ºrk ƒ∞slam Arkeolojisi",
    "T√ºrk√ße √ñƒüretmenliƒüi",
    "T√ºrk√ße √ñƒüretmenliƒüi",
    "T√ºrkoloji",
    "T√ºt√ºn Eksperliƒüi",
    "U√ßak Bakƒ±m ve Onarƒ±m",
    "U√ßak Bakƒ±m ve Onarƒ±m (Fak√ºlte)",
    "U√ßak Bakƒ±m ve Onarƒ±m (Y√ºksekokul)",
    "U√ßak Elektrik ve Elektroniƒüi",
    "U√ßak G√∂vde ve Motor Bakƒ±mƒ±",
    "U√ßak G√∂vde ve Motor Bakƒ±mƒ± (Fak√ºlte)",
    "U√ßak G√∂vde ve Motor Bakƒ±mƒ± (Y√ºksekokul)",
    "U√ßak M√ºhendisliƒüi",
    "U√ßak Teknolojisi",
    "U√ßu≈ü Harekat Y√∂neticiliƒüi",
    "Ukrayna Dili ve Edebiyatƒ±",
    "Ula≈ütƒ±rma ve Trafik Hizmetleri",
    "Uluslararasƒ± Ekonomi",
    "Uluslararasƒ± Ekonomik ƒ∞li≈ükiler",
    "Uluslararasƒ± Finans",
    "Uluslararasƒ± Finans ve Bankacƒ±lƒ±k",
    "Uluslararasƒ± Giri≈üimcilik",
    "Uluslararasƒ± Giri≈üimcilik (A√ßƒ±k√∂ƒüretim)",
    "Uluslararasƒ± ƒ∞li≈ükiler",
    "Uluslararasƒ± ƒ∞li≈ükiler (A√ßƒ±k√∂ƒüretim)",
    "Uluslararasƒ± ƒ∞≈ületme Y√∂netimi",
    "Uluslararasƒ± Ticaret",
    "Uluslararasƒ± Ticaret (Fak√ºlte)",
    "Uluslararasƒ± Ticaret (Y√ºksekokul)",
    "Uluslararasƒ± Ticaret ve Finans",
    "Uluslararasƒ± Ticaret ve Finansman",
    "Uluslararasƒ± Ticaret ve Finansman (Fak√ºlte)",
    "Uluslararasƒ± Ticaret ve Finansman (Y√ºksekokul)",
    "Uluslararasƒ± Ticaret ve ƒ∞≈ületmecilik",
    "Uluslararasƒ± Ticaret ve ƒ∞≈ületmecilik (Fak√ºlte)",
    "Uluslararasƒ± Ticaret ve ƒ∞≈ületmecilik (Y√ºksekokul)",
    "Uluslararasƒ± Ticaret ve Lojistik",
    "Uluslararasƒ± Ticaret ve Lojistik (A√ßƒ±k√∂ƒüretim)",
    "Uluslararasƒ± Ticaret ve Lojistik (Fak√ºlte)",
    "Uluslararasƒ± Ticaret ve Lojistik (Y√ºksekokul)",
    "Un ve Unlu Mamuller Teknolojisi",
    "Urdu Dili ve Edebiyatƒ±",
    "Uygulamalƒ± ƒ∞ngilizce √áevirmenlik",
    "Uygulamalƒ± ƒ∞spanyolca √áevirmenlik",
    "Uzay Bilimleri ve Teknolojileri",
    "Uzay M√ºhendisliƒüi",
    "Uzay ve Uydu M√ºhendisliƒüi",
    "√úretimde Kalite Kontrol",
    "Veri Bilimi ve Analitiƒüi",
    "Veterinerlik",
    "Yaban Hayatƒ± Ekolojisi ve Y√∂netimi",
    "Yaƒü End√ºstrisi",
    "Yapay Zeka M√ºhendisliƒüi",
    "Yapay Zek√¢ Operat√∂rl√ºƒü√º",
    "Yapay Zeka ve Makine √ñƒürenmesi",
    "Yapay Zeka ve Veri M√ºhendisliƒüi",
    "Yapƒ± Denetimi",
    "Yapƒ± Ressamlƒ±ƒüƒ±",
    "Yapƒ± Tesisat Teknolojisi",
    "Yapƒ± Yalƒ±tƒ±m Teknolojisi",
    "Ya≈ülƒ± Bakƒ±mƒ±",
    "Ya≈ülƒ± Bakƒ±mƒ± (A√ßƒ±k√∂ƒüretim)",
    "Yat Kaptanlƒ±ƒüƒ±",
    "Yazƒ±lƒ±m Geli≈ütirme",
    "Yazƒ±lƒ±m Geli≈ütirme (Fak√ºlte)",
    "Yazƒ±lƒ±m Geli≈ütirme (Y√ºksekokul)",
    "Yazƒ±lƒ±m M√ºhendisliƒüi",
    "Yazƒ±lƒ±m M√ºhendisliƒüi (M.T.O.K.)",
    "Yeni Medya",
    "Yeni Medya (Fak√ºlte)",
    "Yeni Medya ve Gazetecilik (A√ßƒ±k√∂ƒüretim)",
    "Yeni Medya ve ƒ∞leti≈üim",
    "Yerel Y√∂netimler",
    "Yerel Y√∂netimler",
    "Yerel Y√∂netimler (A√ßƒ±k√∂ƒüretim)",
    "Yerel Y√∂netimler (√ñnlisans)",
    "Yiyecek ve ƒ∞√ßecek ƒ∞≈ületmeciliƒüi",
    "Y√∂netim Bilimleri Programlarƒ±",
    "Y√∂netim Bili≈üim Sistemleri",
    "Y√∂netim Bili≈üim Sistemleri (A√ßƒ±k√∂ƒüretim)",
    "Y√∂netim Bili≈üim Sistemleri (Fak√ºlte)",
    "Y√∂netim Bili≈üim Sistemleri (Y√ºksekokul)",
    "Yunan Dili ve Edebiyatƒ±",
    "Zaza Dili ve Edebiyatƒ±",
    "Zeytincilik ve Zeytin ƒ∞≈üleme Teknolojisi",
    "Ziraat M√ºhendisliƒüi Programlarƒ±",
    "Zootekni"
];

// Custom dropdown setup function
function setupCustomDropdowns(eventId) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (!card) return;

    const universityInput = card.querySelector('input[name="university"]');
    const departmentInput = card.querySelector('input[name="department"]');
    const universityDropdown = card.querySelector('.university-dropdown');
    const departmentDropdown = card.querySelector('.department-dropdown');

    if (universityInput && universityDropdown) {
        setupCustomDropdown(universityInput, universityDropdown, universities);
    }

    if (departmentInput && departmentDropdown) {
        setupCustomDropdown(departmentInput, departmentDropdown, departments);
    }
}

function setupCustomDropdown(input, dropdown, data) {
    function renderItems(filter = '') {
        dropdown.innerHTML = '';
        const filteredData = data.filter(item => item.toLowerCase().includes(filter.toLowerCase()));
        filteredData.slice(0, 10).forEach(item => {
            const div = document.createElement('div');
            div.textContent = item;
            div.className = 'custom-dropdown-item';
            div.addEventListener('click', () => {
                input.value = item;
                input.dispatchEvent(new Event('input', { bubbles: true }));
                dropdown.style.display = 'none';
            });
            dropdown.appendChild(div);
        });
    }

    input.addEventListener('focus', () => {
        renderItems(input.value);
        dropdown.style.display = 'block';
    });
    
    input.addEventListener('input', () => {
        renderItems(input.value);
        if (dropdown.style.display !== 'block') {
            dropdown.style.display = 'block';
        }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
        if (!input.contains(event.target) && !dropdown.contains(event.target)) {
            dropdown.style.display = 'none';
        }
    });
}

// Event registration form handler
async function handleEventRegistration(eventId, formData) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (!card) return;

    try {
        // Convert FormData to object
        const data = Object.fromEntries(formData);
        data.eventId = eventId;
        data.registrationDate = new Date().toISOString();
        
        // Create registration
        await DatabaseService.createRegistration(data);
        
        // Show success message
    const regFormContainer = card.querySelector('.registration-form');
    const successMsg = card.querySelector('.success-message');
    
    if (regFormContainer && successMsg) {
        regFormContainer.style.display = 'none';
        successMsg.style.display = 'flex';
        }
        
        // Update participant count display
        const participantCount = card.querySelector('.participant-count');
        if (participantCount) {
            const currentCount = parseInt(participantCount.textContent.match(/\d+/)?.[0] || '0');
            participantCount.innerHTML = `<i class="fas fa-users"></i> ${currentCount + 1} Katƒ±lƒ±mcƒ±`;
        }
        
    } catch (error) {
        console.error('Registration error:', error);
        alert('Kayƒ±t sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    loadAnnouncements();
    loadBlogPosts();
    loadEvents();
    
    // Event registration form handlers
    document.addEventListener('submit', function(e) {
        if (e.target.classList.contains('event-registration-form')) {
            e.preventDefault();
            const eventId = e.target.getAttribute('data-event-id');
            const formData = new FormData(e.target);
            handleEventRegistration(eventId, formData);
        }
    });
    
    // Announcement reaction handlers
    document.addEventListener('click', async function(e) {
        if (e.target.closest('.reaction')) {
            const reaction = e.target.closest('.reaction');
            const announcementCard = reaction.closest('.announcement-card');
            const announcementId = announcementCard.dataset.announcementId;
            const reactionType = reaction.dataset.reaction;
            
            if (!announcementId || !reactionType) return;
            
            const parent = reaction.closest('.reactions');
            const currentlyActive = parent.querySelector('.reaction.active');
            const countSpan = reaction.querySelector('.count');
            let count = parseInt(countSpan.textContent);

            try {
                if (reaction.classList.contains('active')) {
                    // Aynƒ± reaksiyona tekrar tƒ±klandƒ±ysa, iptal et
                    await DatabaseService.updateAnnouncementReaction(announcementId, reactionType, false);
                    reaction.classList.remove('active');
                    countSpan.textContent = count - 1;
                } else {
                    // Eski aktif reaksiyonu bul ve sayƒ±sƒ±nƒ± azalt
                    const oldActiveReaction = parent.querySelector('.reaction.active');
                    if (oldActiveReaction && oldActiveReaction !== reaction) {
                        const oldCountSpan = oldActiveReaction.querySelector('.count');
                        const oldCount = parseInt(oldCountSpan.textContent);
                        oldCountSpan.textContent = oldCount - 1;
                        oldActiveReaction.classList.remove('active');
                    }
                    
                    // Yeni reaksiyonu aktif yap ve sayƒ±sƒ±nƒ± artƒ±r
                    await DatabaseService.updateAnnouncementReaction(announcementId, reactionType, true);
                    reaction.classList.add('active');
                    countSpan.textContent = count + 1;
                    
                    // Konfeti ve ƒ±≈üƒ±k efektlerini tetikle
                    triggerAnnouncementEffects(announcementCard, reactionType);
                }
                
                // Total votes'u ve progress bar'larƒ± g√ºncelle
                updateVoteDisplay(announcementCard);
                
            } catch (error) {
                console.error('Error updating reaction:', error);
                alert('Reaksiyon g√ºncellenirken bir hata olu≈ütu.');
            }
        }
    });
    
    // Konfeti ve ƒ±≈üƒ±k efektleri
    function triggerAnnouncementEffects(card, reactionType) {
        const confettiColors = {
            onay: ['#3b5998', '#ffffff', '#cfe2ff'],
            katiliyorum: ['#28a745', '#ffffff', '#a3d9b1'],
            katilamiyorum: ['#dc3545', '#6c757d', '#f8d7da'],
            'sorum_var': ['#ffc107', '#ffffff', '#ffeeba'],
            destek: ['#6c63ff', '#f5d5e4', '#dcd9ff']
        };

        // Konfeti animasyonunu tetikle
        const container = document.createElement('div');
        container.className = 'confetti-container';
        card.appendChild(container);

        const colors = confettiColors[reactionType] || ['#000000'];
        const confettiCount = 250; // DAHA DA ≈ûEN ≈ûAKRAK!

        for (let i = 0; i < confettiCount; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            
            if (Math.random() > 0.3) {
                const size = Math.random() * 10 + 5;
                confetti.style.width = `${size}px`;
                confetti.style.height = `${size}px`;
                confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '0';
            } else {
                confetti.style.width = `${Math.random() * 4 + 3}px`;
                confetti.style.height = `${Math.random() * 15 + 10}px`;
                confetti.style.borderRadius = '0';
            }

            const angle = Math.random() * 2 * Math.PI;
            const velocity = Math.random() * 300 + 200;
            const xEnd = Math.cos(angle) * velocity;
            const yEnd = Math.sin(angle) * velocity + (Math.random() * 150 + 200);
            const rotation = Math.random() * 1080 - 540;
            const duration = Math.random() * 2 + 2.5;

            confetti.style.setProperty('--x-end', `${xEnd}px`);
            confetti.style.setProperty('--y-end', `${yEnd}px`);
            confetti.style.setProperty('--rotation', `${rotation}deg`);
            confetti.style.animation = `confetti-burst ${duration}s cubic-bezier(0.1, 0.9, 0.2, 1) forwards`;
            
            container.appendChild(confetti);
        }

        // I≈üƒ±k animasyonunu tetikle
        const glowClass = 'glow-' + reactionType;
        // √ñnceki animasyon class'ƒ±nƒ± temizle ve yenisini ekle
        card.className = card.className.replace(/\bglow-\w+/g, '');
        void card.offsetWidth; // Reflow tetiklemesi animasyonun yeniden √ßalƒ±≈ümasƒ±nƒ± saƒülar
        card.classList.add(glowClass);

        // Animasyon bittiƒüinde class'ƒ± temizle
        card.addEventListener('animationend', function handler(e) {
            if (e.animationName === 'glowPulse') {
                card.className = card.className.replace(/\bglow-\w+/g, '');
                card.removeEventListener('animationend', handler);
            }
        });

        // Konfeti container'ƒ±nƒ± temizle
        setTimeout(() => {
            if (container.parentNode) {
                container.remove();
            }
        }, 4000);
    }
});

// Add scroll effect to navbar
window.addEventListener('scroll', () => {
    const navbar = document.querySelector('.navbar');
    if (window.scrollY > 100) {
        navbar.style.background = 'rgba(255, 255, 255, 0.98)';
    } else {
        navbar.style.background = 'rgba(255, 255, 255, 0.95)';
    }
});

// Intersection Observer for animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// Observe elements for animation
document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.about-card, .event-card, .blog-card');
    animatedElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
});

// Sayfa tamamen y√ºklendikten sonra ekstra g√ºvenlik kontrol√º
window.addEventListener('load', () => {
    setTimeout(() => {
        document.querySelectorAll('.announcement-card').forEach(card => {
            updateVoteDisplay(card);
        });
    }, 1500);
});
