// Mobile Navigation
const hamburger = document.querySelector('.hamburger');
const navMenu = document.querySelector('.nav-menu');

hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navMenu.classList.toggle('active');
});

// Close mobile menu when clicking on a link
document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
    });
});

// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Contact form handling
const contactForm = document.getElementById('contact-form');
if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const data = Object.fromEntries(formData);
        
        // Here you would typically send the data to your backend
        console.log('Form submitted:', data);
        
        // Show success message
        alert('Mesajınız başarıyla gönderildi!');
        this.reset();
    });
}

// Load blog posts dynamically
async function loadBlogPosts() {
    const blogContainer = document.getElementById('blog-posts');
    if (!blogContainer) return;
    
    try {
        const posts = await DatabaseService.getBlogPosts();
        
        if (posts.length === 0) {
            blogContainer.innerHTML = '<p class="no-posts">Henüz blog yazısı bulunmuyor. Yakında yeni yazılar eklenecek!</p>';
            return;
        }
        
        blogContainer.innerHTML = posts.map(post => {
            const postDate = new Date(post.created_at);
            const formattedDate = postDate.toLocaleString('tr-TR', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                timeZone: 'Europe/Istanbul'
            });
            
            // Get image source
            const imageSrc = post.image_file || post.image_url || 'https://images.unsplash.com/photo-1640102953836-5651f5d6b240?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1024&q=80';
            
            // Otomatik görüntülenme sayısını artır
            incrementViewCount(post.id);
            
            return `
                <div class="card" data-post-id="${post.id}" onclick="readFullBlog(${post.id})" style="cursor: pointer;">
                    <div class="card-img-holder">
                        <img src="${imageSrc}" alt="${post.title}">
                    </div>
                    <h3 class="blog-title">${post.title}</h3>
                    <span class="blog-time">${formattedDate}</span>
                    <p class="description">
                        ${post.excerpt || post.content.substring(0, 150) + '...'}
                    </p>
                    <div class="options">
                        <span>
                            Blog Yazısını Oku
                        </span>
                        <button class="btn" onclick="event.stopPropagation(); toggleLike(${post.id})">
                            <i class="fas fa-heart" style="color: ${post.user_liked ? '#ef4444' : '#22215B'}"></i>
                            ${post.like_count || 0}
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
    } catch (error) {
        console.error('Error loading blog posts:', error);
        blogContainer.innerHTML = '<p class="no-posts">Blog yazıları yüklenirken bir hata oluştu.</p>';
    }
}

// Helper function to get blog icon based on category
function getBlogIcon(category) {
    const icons = {
        'bilim': 'fas fa-flask',
        'teknoloji': 'fas fa-microchip',
        'etkinlik': 'fas fa-calendar-alt',
        'duyuru': 'fas fa-bullhorn',
        'atolye': 'fas fa-tools',
        'konferans': 'fas fa-microphone'
    };
    return icons[category] || 'fas fa-newspaper';
}

// Helper function to get category name
function getCategoryName(category) {
    const categories = {
        'bilim': 'Bilim',
        'teknoloji': 'Teknoloji',
        'etkinlik': 'Etkinlik',
        'duyuru': 'Duyuru',
        'atolye': 'Atölye',
        'konferans': 'Konferans'
    };
    return categories[category] || category;
}

// Load announcements dynamically
async function loadAnnouncements() {
    const announcementsContainer = document.getElementById('announcements-container');
    if (!announcementsContainer) return;
    
    try {
        const announcements = await DatabaseService.getAnnouncements();
        
        if (announcements.length === 0) {
            announcementsContainer.innerHTML = '<p class="no-announcements">Henüz duyuru bulunmuyor. Yakında yeni duyurular eklenecek!</p>';
            return;
        }
        
        announcementsContainer.innerHTML = announcements.map(announcement => `
            <div class="announcement-card">
                <div class="announcement-header">
                    <h3>${announcement.title}</h3>
                    <span class="announcement-category ${announcement.category}">${getCategoryName(announcement.category)}</span>
                </div>
                <div class="announcement-content">
                    <p>${announcement.content ? announcement.content.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : 'İçerik bulunmuyor'}</p>
                </div>
                <div class="announcement-footer">
                    <span class="announcement-date">${new Date(announcement.created_at).toLocaleString('tr-TR', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        timeZone: 'Europe/Istanbul'
                    })}</span>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading announcements:', error);
        announcementsContainer.innerHTML = '<p class="error">Duyurular yüklenirken bir hata oluştu.</p>';
    }
}

// Load events dynamically
async function loadEvents() {
    const eventsGrid = document.getElementById('events-grid');
    if (!eventsGrid) return;
    
    try {
        const events = await DatabaseService.getEvents();
        
        if (events.length === 0) {
            eventsGrid.innerHTML = '<p class="no-events">Henüz etkinlik bulunmuyor. Yakında yeni etkinlikler eklenecek!</p>';
            return;
        }
        
        // En yeni etkinliği en sola koymak için reverse kullanıyoruz
        eventsGrid.innerHTML = events.reverse().map(event => {
            const eventDate = new Date(event.date);
            const eventId = event.id;
            return `
                <div class="event-card-container">
                    <div class="event-card" data-event-id="${eventId}">
                        <!-- KARTIN ÖN YÜZÜ -->
                        <div class="card-face card-front" onclick="flipEventCard(${eventId})">
                            <div class="card-image">
                                <img src="${event.image_url || 'https://placehold.co/600x400/a2d2ff/333?text=Etkinlik'}" alt="${event.title}">
                            </div>
                            <div class="card-content">
                                <h2 class="event-title">${event.title}</h2>
                                <ul class="event-details">
                                    <li><i class="fas fa-calendar-alt"></i> ${eventDate.toLocaleString('tr-TR', {
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric',
                                        timeZone: 'Europe/Istanbul'
                                    })}</li>
                                    <li><i class="fas fa-clock"></i> ${eventDate.toLocaleString('tr-TR', {
                                        hour: '2-digit',
                                        minute: '2-digit',
                                        timeZone: 'Europe/Istanbul'
                                    })}</li>
                                    <li><i class="fas fa-map-marker-alt"></i> ${event.location}</li>
                                </ul>
                                <p class="event-description">${event.description ? event.description.substring(0, 100) + '...' : 'Etkinlik açıklaması bulunmuyor.'}</p>
                            </div>
                            <div class="card-footer">
                                <div class="participant-count"><i class="fas fa-users"></i> ${event.capacity || 'Sınırsız'} Katılımcı</div>
                                <button class="btn flip-btn" onclick="event.stopPropagation(); flipEventCard(${eventId})">Katıl</button>
                            </div>
                        </div>
                        <!-- KARTIN ARKA YÜZÜ (FORM) -->
                        <div class="card-face card-back">
                            <div class="registration-form">
                                <h3 class="form-title">Etkinliğe Kayıt Ol</h3>
                                <form class="event-registration-form" data-event-id="${eventId}">
                                    <div class="animated-form-control">
                                        <input type="text" name="fullname" required="">
                                        <label for="fullname">
                                            <span style="transition-delay:0ms">İ</span><span style="transition-delay:50ms">s</span><span style="transition-delay:100ms">i</span><span style="transition-delay:150ms">m</span><span style="transition-delay:200ms"> </span><span style="transition-delay:250ms">S</span><span style="transition-delay:300ms">o</span><span style="transition-delay:350ms">y</span><span style="transition-delay:400ms">i</span><span style="transition-delay:450ms">s</span><span style="transition-delay:500ms">i</span><span style="transition-delay:550ms">m</span>
                                        </label>
                                    </div>
                                   
                                    <div class="animated-form-control">
                                        <input type="text" name="university" autocomplete="off" required="">
                                        <label for="university">
                                             <span style="transition-delay:0ms">Ü</span><span style="transition-delay:50ms">n</span><span style="transition-delay:100ms">i</span><span style="transition-delay:150ms">v</span><span style="transition-delay:200ms">e</span><span style="transition-delay:250ms">r</span><span style="transition-delay:300ms">s</span><span style="transition-delay:350ms">i</span><span style="transition-delay:400ms">t</span><span style="transition-delay:450ms">e</span>
                                        </label>
                                        <div class="custom-dropdown university-dropdown"></div>
                                    </div>

                                    <div class="animated-form-control">
                                        <input type="text" name="department" autocomplete="off" required="">
                                        <label for="department">
                                            <span style="transition-delay:0ms">B</span><span style="transition-delay:50ms">ö</span><span style="transition-delay:100ms">l</span><span style="transition-delay:150ms">ü</span><span style="transition-delay:200ms">m</span>
                                        </label>
                                        <div class="custom-dropdown department-dropdown"></div>
                                    </div>

                                    <div class="animated-form-control">
                                        <input type="email" name="email" required="">
                                        <label for="email">
                                            <span style="transition-delay:0ms">E</span><span style="transition-delay:50ms">-</span><span style="transition-delay:100ms">p</span><span style="transition-delay:150ms">o</span><span style="transition-delay:200ms">s</span><span style="transition-delay:250ms">t</span><span style="transition-delay:300ms">a</span>
                                        </label>
                                    </div>
                                    <div class="form-actions">
                                        <button type="button" class="btn btn-back" onclick="flipEventCardBack(${eventId})">Geri Dön</button>
                                        <button type="submit" class="btn">Kaydı Onayla</button>
                                    </div>
                                </form>
                            </div>
                            <div class="success-message">
                                 <div class="success-icon"><i class="fas fa-check-circle"></i></div>
                                 <h3>Kaydınız Alındı!</h3>
                                 <p>Etkinlik detayları e-posta adresinize gönderilecektir.</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
    } catch (error) {
        console.error('Error loading events:', error);
        eventsGrid.innerHTML = '<p class="no-events">Etkinlikler yüklenirken bir hata oluştu.</p>';
    }
}

// Event card flip functions
function flipEventCard(eventId) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (card) {
        card.classList.add('is-flipped');
        setupCustomDropdowns(eventId);
    }
}

function flipEventCardBack(eventId) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (card) {
        card.classList.remove('is-flipped');
    }
}

// Helper function to get event icon based on type
function getEventIcon(type) {
    const icons = {
        'bilim-senligi': 'fas fa-flask',
        'atolye': 'fas fa-tools',
        'konferans': 'fas fa-microphone',
        'teknik-gezi': 'fas fa-bus'
    };
    return icons[type] || 'fas fa-calendar-alt';
}

// Blog interaction functions
async function incrementViewCount(postId) {
    try {
        const result = await DatabaseService.incrementBlogView(postId);
        if (result.alreadyViewed) {
            console.log('Post already viewed by this IP');
        } else if (result.success) {
            console.log('View count incremented');
        }
    } catch (error) {
        console.error('Error incrementing view count:', error);
    }
}

async function toggleLike(postId) {
    try {
        const result = await DatabaseService.toggleBlogLike(postId);
        
        if (result.error) {
            console.error('Error toggling like:', result.error);
            return;
        }
        
        // Update the like count and icon color in UI
        const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
        if (cardElement) {
            const likeButton = cardElement.querySelector(`[onclick="toggleLike(${postId})"]`);
            const icon = likeButton.querySelector('i');
            
            // Update icon color based on action
            if (result.action === 'liked') {
                icon.style.color = '#ef4444'; // Red for liked
            } else if (result.action === 'unliked') {
                icon.style.color = '#22215B'; // Default color for unliked
            }
        }
        
        console.log('Like toggled:', result.action);
    } catch (error) {
        console.error('Error toggling like:', error);
        alert('Beğeni işlemi sırasında bir hata oluştu.');
    }
}

async function sharePost(postId) {
    try {
        const result = await DatabaseService.incrementBlogShare(postId);
        
        if (result.alreadyShared) {
            console.log('Post already shared by this IP');
            return;
        }
        
        if (result.error) {
            console.error('Error sharing post:', result.error);
            return;
        }
        
        // Show share options
        if (navigator.share) {
            try {
                await navigator.share({
                    title: 'MUSIC Blog',
                    text: 'Bu blog yazısını kontrol edin!',
                    url: window.location.href
                });
            } catch (shareError) {
                if (shareError.name === 'AbortError') {
                    console.log('Share canceled by user');
                    // Don't show error for user cancellation
                } else {
                    throw shareError;
                }
            }
        } else {
            // Fallback: copy to clipboard
            try {
                await navigator.clipboard.writeText(window.location.href);
                alert('Link kopyalandı!');
            } catch (clipboardError) {
                console.error('Clipboard error:', clipboardError);
                alert('Paylaşım linki: ' + window.location.href);
            }
        }
    } catch (error) {
        console.error('Error sharing post:', error);
        alert('Paylaşım sırasında bir hata oluştu.');
    }
}

async function readFullBlog(postId) {
    // Close any existing modal first
    closeBlogModal();
    
    // Add click animation
    const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
    if (cardElement) {
        cardElement.classList.add('clicking');
        setTimeout(() => {
            cardElement.classList.remove('clicking');
        }, 150);
    }
    
    try {
        // Get specific blog post data from Supabase
        const { data, error } = await supabase
            .from('blog_posts')
            .select('*')
            .eq('id', postId)
            .eq('status', 'published')
            .single();
        
        if (error || !data) {
            alert('Blog yazısı bulunamadı!');
            return;
        }
        
        const postTitle = data.title;
        const postDate = new Date(data.created_at).toLocaleString('tr-TR', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Istanbul'
        });
        const postContent = data.content;
        const authorName = data.author_name || 'MUSIC Ekibi';
        
        // Debug: Log the content to see what we're getting
        console.log('Blog content from Supabase:', postContent);
        console.log('Content type:', typeof postContent);
        console.log('Content length:', postContent ? postContent.length : 'null/undefined');
        
        // Create modal HTML
        const modalHTML = `
            <div class="blog-modal-overlay" id="blog-modal-overlay">
                <div class="blog-modal">
                    <button class="blog-modal-close" onclick="closeBlogModal()">
                        <i class="fas fa-times"></i>
                    </button>
                    <div class="blog-modal-header">
                        <h1 class="blog-modal-title">${postTitle}</h1>
                        <div class="blog-modal-meta">
                            <div class="blog-modal-date">
                                <i class="fas fa-calendar"></i>
                                <span>${postDate}</span>
                            </div>
                            <div class="blog-modal-author">
                                <i class="fas fa-user"></i>
                                <span>${authorName}</span>
                            </div>
                        </div>
                    </div>
                    <div class="blog-modal-content" id="blog-modal-content">
                        ${formatBlogContent(postContent)}
                    </div>
                    <div class="blog-modal-actions">
                        <button class="blog-modal-like" onclick="toggleModalLike(${postId})" id="modal-like-${postId}">
                            <i class="fas fa-heart"></i>
                            <span>Beğen</span>
                        </button>
                        <button class="blog-modal-share" onclick="shareModalPost(${postId})">
                            <i class="fas fa-share-alt"></i>
                            <span>Paylaş</span>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        // Add modal to body
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Show modal with animation immediately
        const modalOverlay = document.getElementById('blog-modal-overlay');
        modalOverlay.classList.add('active');
        
        // Remove image resize containers from blog modal content
        const modalContent = document.getElementById('blog-modal-content');
        const resizeContainers = modalContent.querySelectorAll('.image-resize-container');
        resizeContainers.forEach(container => {
            const img = container.querySelector('img');
            if (img) {
                // Move image out of resize container
                container.parentNode.insertBefore(img, container);
                container.remove();
            }
        });
        
        // Close modal when clicking outside
        modalOverlay.addEventListener('click', function(e) {
            if (e.target === modalOverlay) {
                closeBlogModal();
            }
        });
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
        
    } catch (error) {
        console.error('Error loading blog post:', error);
        alert('Blog yazısı yüklenirken bir hata oluştu.');
    }
}

function closeBlogModal() {
    const modal = document.getElementById('blog-modal-overlay');
    if (modal) {
        modal.classList.remove('active');
        
        // Remove modal after animation
        setTimeout(() => {
            modal.remove();
            document.body.style.overflow = '';
        }, 300);
    }
}

function toggleModalLike(postId) {
    // Use the existing toggleLike function
    toggleLike(postId);
    
    // Update modal like button
    const modalLikeBtn = document.getElementById(`modal-like-${postId}`);
    if (modalLikeBtn) {
        // This will be updated by the toggleLike function
        setTimeout(() => {
            // Check if the card like button shows liked state
            const cardElement = document.querySelector(`[data-post-id="${postId}"]`);
            const cardLikeBtn = cardElement.querySelector(`[onclick="toggleLike(${postId})"]`);
            const cardIcon = cardLikeBtn.querySelector('i');
            
            if (cardIcon.style.color === 'rgb(239, 68, 68)') {
                modalLikeBtn.classList.add('liked');
                modalLikeBtn.querySelector('span').textContent = 'Beğenildi';
            } else {
                modalLikeBtn.classList.remove('liked');
                modalLikeBtn.querySelector('span').textContent = 'Beğen';
            }
        }, 100);
    }
}

function shareModalPost(postId) {
    // Use the existing sharePost function
    sharePost(postId);
}

function openCommentModal(postId) {
    // TODO: Implement comment modal
    alert('Yorum sistemi yakında eklenecek!');
}

function formatBlogContent(content) {
    console.log('formatBlogContent input:', content);
    
    // If content is null or undefined, return empty string
    if (!content) {
        console.log('Content is null/undefined, returning empty string');
        return '';
    }
    
    // If content contains HTML tags, return it as is
    if (content.includes('<') && content.includes('>')) {
        console.log('Content contains HTML, returning as is');
        return content;
    }
    
    // Otherwise, format as plain text with paragraphs
    console.log('Content is plain text, formatting as paragraphs');
    const paragraphs = content.split('\n\n').filter(p => p.trim() !== '');
    const result = paragraphs.map(paragraph => 
        `<p>${paragraph.trim()}</p>`
    ).join('');
    
    console.log('Formatted result:', result);
    return result;
}

function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Load blog posts and events when page loads
// Data Arrays for dropdowns
const universities = [
    "Boğaziçi Üniversitesi",
    "Galatasaray Üniversitesi", 
    "İstanbul Teknik Üniversitesi",
    "İstanbul Medeniyet Üniversitesi",
    "İstanbul Üniversitesi",
    "İstanbul Üniversitesi-Cerrahpaşa",
    "Marmara Üniversitesi",
    "Mimar Sinan Güzel Sanatlar Üniversitesi",
    "Sağlık Bilimleri Üniversitesi",
    "Türk-Alman Üniversitesi",
    "Yıldız Teknik Üniversitesi",
    "Acıbadem Mehmet Ali Aydınlar Üniversitesi",
    "Altınbaş Üniversitesi",
    "Ataşehir Adıgüzel Meslek Yüksekokulu",
    "Bahçeşehir Üniversitesi",
    "Beykoz Üniversitesi",
    "Bezm-i Alem Vakıf Üniversitesi",
    "Demiroğlu Bilim Üniversitesi",
    "Doğuş Üniversitesi",
    "Fatih Sultan Mehmet Vakıf Üniversitesi",
    "Fenerbahçe Üniversitesi",
    "Haliç Üniversitesi",
    "Işık Üniversitesi",
    "İbn Haldun Üniversitesi",
    "İstanbul 29 Mayıs Üniversitesi",
    "İstanbul Arel Üniversitesi",
    "İstanbul Atlas Üniversitesi",
    "İstanbul Aydın Üniversitesi",
    "İstanbul Beykent Üniversitesi",
    "İstanbul Bilgi Üniversitesi",
    "İstanbul Esenyurt Üniversitesi",
    "İstanbul Galata Üniversitesi",
    "İstanbul Gedik Üniversitesi",
    "İstanbul Gelişim Üniversitesi",
    "İstanbul Kent Üniversitesi",
    "İstanbul Kültür Üniversitesi",
    "İstanbul Medeniyet Üniversitesi",
    "İstanbul Medipol Üniversitesi",
    "İstanbul Nişantaşı Üniversitesi",
    "İstanbul Okan Üniversitesi",
    "İstanbul Rumeli Üniversitesi",
    "İstanbul Sabahattin Zaim Üniversitesi",
    "İstanbul Sağlık ve Sosyal Bilimler Meslek YüksekOkulu",
    "İstanbul Sağlık ve Teknoloji Üniversitesi",
    "İstanbul Şişli Meslek Yüksekokulu"
];

const departments = ["Bilgisayar Mühendisliği", "Elektrik-Elektronik Mühendisliği", "Endüstri Mühendisliği", "İnşaat Mühendisliği", "Makine Mühendisliği", "Kimya Mühendisliği", "Matematik", "Fizik", "Kimya", "Biyoloji", "İşletme", "İktisat", "Siyaset Bilimi", "Uluslararası İlişkiler", "Hukuk", "Tıp", "Eczacılık", "Diş Hekimliği", "Hemşirelik", "Fizyoterapi", "Psikoloji", "Sosyoloji", "Tarih", "Türk Dili ve Edebiyatı", "İngiliz Dili ve Edebiyatı", "Alman Dili ve Edebiyatı", "Fransız Dili ve Edebiyatı", "Rus Dili ve Edebiyatı", "Çin Dili ve Edebiyatı", "Japon Dili ve Edebiyatı", "Arap Dili ve Edebiyatı", "Fars Dili ve Edebiyatı", "İspanyol Dili ve Edebiyatı", "İtalyanca", "Portekizce", "Mimarlık", "İç Mimarlık", "Endüstriyel Tasarım", "Grafik Tasarım", "Moda Tasarımı", "Güzel Sanatlar", "Müzik", "Tiyatro", "Sinema", "Radyo ve Televizyon", "Gazetecilik", "Halkla İlişkiler", "Reklamcılık", "Turizm", "Otel İşletmeciliği", "Gastronomi", "Spor Bilimleri", "Beden Eğitimi", "Antrenörlük", "Rehberlik ve Psikolojik Danışmanlık", "Okul Öncesi Öğretmenliği", "Sınıf Öğretmenliği", "Matematik Öğretmenliği", "Fen Bilgisi Öğretmenliği", "Türkçe Öğretmenliği", "İngilizce Öğretmenliği", "Sosyal Bilgiler Öğretmenliği", "Tarih Öğretmenliği", "Coğrafya Öğretmenliği", "Felsefe Grubu Öğretmenliği", "Din Kültürü ve Ahlak Bilgisi Öğretmenliği", "Müzik Öğretmenliği", "Resim Öğretmenliği", "Beden Eğitimi Öğretmenliği", "Bilgisayar ve Öğretim Teknolojileri Öğretmenliği", "Özel Eğitim Öğretmenliği", "Zihin Engelliler Öğretmenliği", "İşitme Engelliler Öğretmenliği", "Görme Engelliler Öğretmenliği", "Üstün Zekalılar Öğretmenliği", "Çocuk Gelişimi", "Aile ve Tüketici Bilimleri", "Beslenme ve Diyetetik", "Sosyal Hizmet", "Çalışma Ekonomisi ve Endüstri İlişkileri", "Kamu Yönetimi", "Siyaset Bilimi ve Kamu Yönetimi", "Uluslararası İlişkiler", "Avrupa Birliği İlişkileri", "Amerikan Kültürü ve Edebiyatı", "Arkeoloji", "Sanat Tarihi", "Felsefe", "Sosyoloji", "Antropoloji", "Psikoloji", "Coğrafya", "Jeoloji", "Jeofizik", "Meteoroloji", "Harita Mühendisliği", "Şehir ve Bölge Planlama", "Peyzaj Mimarlığı", "Orman Mühendisliği", "Ziraat Mühendisliği", "Gıda Mühendisliği", "Veterinerlik", "Su Ürünleri Mühendisliği", "Balıkçılık Teknolojisi", "Denizcilik İşletmeleri Yönetimi", "Gemi İnşaatı", "Gemi Makineleri İşletme Mühendisliği", "Deniz Ulaştırma İşletme Mühendisliği", "Uçak Mühendisliği", "Havacılık ve Uzay Mühendisliği", "Uçak Elektrik ve Elektroniği", "Havacılık Yönetimi", "Pilotaj", "Uçak Bakım ve Onarım", "Havacılık Elektrik ve Elektroniği", "Raylı Sistemler Mühendisliği", "Otomotiv Mühendisliği", "Mekatronik Mühendisliği", "Biyomedikal Mühendisliği", "Malzeme Bilimi ve Mühendisliği", "Nanoteknoloji Mühendisliği", "Enerji Sistemleri Mühendisliği", "Çevre Mühendisliği", "Petrol ve Doğalgaz Mühendisliği", "Maden Mühendisliği", "Jeoloji Mühendisliği", "Jeofizik Mühendisliği", "Harita Mühendisliği", "Geomatik Mühendisliği", "İnşaat Mühendisliği", "Yapı Mühendisliği", "Geoteknik", "Ulaştırma Mühendisliği", "Su Yapıları Mühendisliği", "Yapı Malzemeleri Mühendisliği", "İnşaat İşletmeciliği", "Yapı Denetimi", "Şehir Planlama", "Bölge Planlama", "Peyzaj Planlama", "Çevre Planlama", "Kentsel Tasarım", "Mimari Restorasyon", "İç Mimarlık ve Çevre Tasarımı", "Endüstriyel Tasarım", "Grafik Tasarım", "Görsel İletişim Tasarımı", "Moda Tasarımı", "Tekstil Tasarımı", "Seramik Tasarımı", "Cam Tasarımı", "Metal Tasarımı", "Ahşap Tasarımı", "Deri Tasarımı", "Takı Tasarımı", "Kuyumculuk", "El Sanatları", "Geleneksel Türk Sanatları", "Çini Sanatı", "Ebru Sanatı", "Tezhip Sanatı", "Hat Sanatı", "Minyatür Sanatı", "Kaligrafi", "Resim", "Heykel", "Seramik", "Cam", "Metal", "Ahşap", "Deri", "Tekstil", "Fotoğraf", "Video", "Sinema", "Tiyatro", "Dans", "Müzik", "Opera", "Bale", "Klasik Müzik", "Caz", "Rock", "Pop", "Halk Müziği", "Türk Halk Müziği", "Türk Sanat Müziği", "Arabesk", "Rap", "Hip Hop", "Elektronik Müzik", "Ambient", "New Age", "World Music", "Folk", "Blues", "Country", "Reggae", "Ska", "Punk", "Metal", "Hard Rock", "Progressive Rock", "Psychedelic Rock", "Alternative Rock", "Indie Rock", "Grunge", "Britpop", "Shoegaze", "Post-Rock", "Math Rock", "Emo", "Screamo", "Post-Hardcore", "Metalcore", "Deathcore", "Nu Metal", "Industrial Metal", "Gothic Metal", "Symphonic Metal", "Power Metal", "Thrash Metal", "Death Metal", "Black Metal", "Doom Metal", "Stoner Metal", "Sludge Metal", "Post-Metal", "Atmospheric Black Metal", "Depressive Black Metal", "Raw Black Metal", "Symphonic Black Metal", "Viking Metal", "Pagan Metal", "Folk Metal", "Celtic Metal", "Medieval Metal", "Oriental Metal", "Progressive Metal", "Technical Death Metal", "Melodic Death Metal", "Brutal Death Metal", "Slam Death Metal", "Grindcore", "Crust Punk", "D-Beat", "Hardcore Punk", "Post-Punk", "New Wave", "Synthpop", "New Romantic", "Gothic Rock", "Darkwave", "Coldwave", "Minimal Wave", "Industrial", "EBM", "Aggrotech", "Futurepop", "Synthwave", "Retrowave", "Outrun", "Vaporwave", "Chillwave", "Witch House", "Dark Ambient", "Drone", "Noise", "Power Electronics", "Harsh Noise", "Merzbow", "Whitehouse", "Throbbing Gristle", "Coil", "Current 93", "Death in June", "Sol Invictus", "Nurse with Wound", "SPK", "Einstürzende Neubauten", "Test Dept", "Laibach", "Skinny Puppy", "Front 242", "Nitzer Ebb", "Front Line Assembly", "VNV Nation", "Covenant", "Apoptygma Berzerk", "And One", "Wolfsheim", "De/Vision", "Camouflage", "Depeche Mode", "New Order", "Joy Division", "The Cure", "Siouxsie and the Banshees", "Bauhaus", "The Sisters of Mercy", "Fields of the Nephilim", "The Mission", "Rosetta Stone", "Clan of Xymox", "Love and Rockets", "Tones on Tail", "The Damned", "The Misfits", "The Cramps", "The B-52's", "Talking Heads", "Blondie", "Patti Smith", "Iggy Pop", "David Bowie", "Lou Reed", "Velvet Underground", "Nico", "John Cale", "Brian Eno", "Roxy Music", "T. Rex", "Marc Bolan", "Gary Glitter", "Slade", "Sweet", "Mud", "Suzi Quatro", "Alice Cooper", "Kiss", "Aerosmith", "Led Zeppelin", "Black Sabbath", "Deep Purple", "Uriah Heep", "Jethro Tull", "Yes", "Genesis", "Pink Floyd", "King Crimson", "Emerson, Lake & Palmer", "Rush", "Van der Graaf Generator", "Gentle Giant", "Camel", "Caravan", "Soft Machine", "Can", "Kraftwerk", "Tangerine Dream", "Klaus Schulze", "Jean-Michel Jarre", "Vangelis", "Mike Oldfield", "Enya", "Clannad", "Loreena McKennitt", "Dead Can Dance", "Lisa Gerrard", "Brendan Perry", "This Mortal Coil", "Cocteau Twins", "4AD", "4AD Records", "Rough Trade", "Factory Records", "Mute Records", "Warp Records", "Ninja Tune", "Mo' Wax", "Wax Trax!", "Cleopatra Records", "Metropolis Records", "Dependent Records", "Out of Line", "Accession Records", "Infacted Recordings", "Scanner", "Dark Dimensions", "Alfa Matrix", "L-Tracks", "Synthetic Symphony", "SPV", "Nuclear Blast", "Century Media", "Roadrunner Records", "Metal Blade", "Earache Records", "Relapse Records", "Southern Lord", "Profound Lore", "20 Buck Spin", "Gilead Media", "Flenser", "Sacred Bones", "Dais Records", "Hospital Productions", "Cold Spring", "Cyclic Law", "Malignant Records", "Cruel Nature", "Small Doses", "Aurora Borealis", "Cold Meat Industry", "Cold Spring", "Cyclic Law", "Malignant Records", "Cruel Nature", "Small Doses", "Aurora Borealis", "Cold Meat Industry"];

// Custom dropdown setup function
function setupCustomDropdowns(eventId) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (!card) return;

    const universityInput = card.querySelector('input[name="university"]');
    const departmentInput = card.querySelector('input[name="department"]');
    const universityDropdown = card.querySelector('.university-dropdown');
    const departmentDropdown = card.querySelector('.department-dropdown');

    if (universityInput && universityDropdown) {
        setupCustomDropdown(universityInput, universityDropdown, universities);
    }

    if (departmentInput && departmentDropdown) {
        setupCustomDropdown(departmentInput, departmentDropdown, departments);
    }
}

function setupCustomDropdown(input, dropdown, data) {
    function renderItems(filter = '') {
        dropdown.innerHTML = '';
        const filteredData = data.filter(item => item.toLowerCase().includes(filter.toLowerCase()));
        filteredData.slice(0, 10).forEach(item => {
            const div = document.createElement('div');
            div.textContent = item;
            div.className = 'custom-dropdown-item';
            div.addEventListener('click', () => {
                input.value = item;
                input.dispatchEvent(new Event('input', { bubbles: true }));
                dropdown.style.display = 'none';
            });
            dropdown.appendChild(div);
        });
    }

    input.addEventListener('focus', () => {
        renderItems(input.value);
        dropdown.style.display = 'block';
    });
    
    input.addEventListener('input', () => {
        renderItems(input.value);
        if (dropdown.style.display !== 'block') {
            dropdown.style.display = 'block';
        }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
        if (!input.contains(event.target) && !dropdown.contains(event.target)) {
            dropdown.style.display = 'none';
        }
    });
}

// Event registration form handler
function handleEventRegistration(eventId, formData) {
    const card = document.querySelector(`[data-event-id="${eventId}"]`);
    if (!card) return;

    const regFormContainer = card.querySelector('.registration-form');
    const successMsg = card.querySelector('.success-message');
    
    if (regFormContainer && successMsg) {
        regFormContainer.style.display = 'none';
        successMsg.style.display = 'flex';
    }
}

document.addEventListener('DOMContentLoaded', () => {
    loadAnnouncements();
    loadBlogPosts();
    loadEvents();
    
    // Event registration form handlers
    document.addEventListener('submit', function(e) {
        if (e.target.classList.contains('event-registration-form')) {
            e.preventDefault();
            const eventId = e.target.getAttribute('data-event-id');
            const formData = new FormData(e.target);
            handleEventRegistration(eventId, formData);
        }
    });
});

// Add scroll effect to navbar
window.addEventListener('scroll', () => {
    const navbar = document.querySelector('.navbar');
    if (window.scrollY > 100) {
        navbar.style.background = 'rgba(255, 255, 255, 0.98)';
    } else {
        navbar.style.background = 'rgba(255, 255, 255, 0.95)';
    }
});

// Intersection Observer for animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// Observe elements for animation
document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.about-card, .event-card, .blog-card');
    animatedElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
});
